/* The following code was generated by JFlex 1.4.3 on 12/01/18 14:02 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/01/18 14:02 from the specification file
 * <tt>./scanner.jflex</tt>
 */
class Http {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\2\43\1\2\25\0\1\42\1\0\1\17\10\0\1\37"+
    "\1\41\1\31\1\33\1\34\2\35\1\36\4\32\1\40\1\0\1\21"+
    "\1\0\1\21\2\0\6\20\25\0\1\21\6\0\1\22\1\25\1\11"+
    "\1\6\1\7\1\3\1\15\1\30\1\27\1\16\1\23\1\14\1\10"+
    "\1\5\1\0\1\12\1\13\1\4\1\26\1\24\16\0\1\43\u1fa2\0"+
    "\2\43\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\122\1\2\3\2\1\1\3\5\1\1\4"+
    "\2\1\1\3\12\1\1\3\6\1\1\3\44\1\1\3"+
    "\41\1\1\3\24\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c"+
    "\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c"+
    "\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc"+
    "\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc"+
    "\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8\0\u09fc"+
    "\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c"+
    "\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\154\0\u0c18"+
    "\0\u0c3c\0\u0c60\0\u0630\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14"+
    "\0\154\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10"+
    "\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0d5c\0\u0f0c"+
    "\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0f78\0\u0fe4\0\u1008"+
    "\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128"+
    "\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248"+
    "\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368"+
    "\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488"+
    "\0\u14ac\0\u14d0\0\u1488\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584"+
    "\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4"+
    "\0\u16c8\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0\0\u17c4"+
    "\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4"+
    "\0\u1908\0\u192c\0\u1950\0\u1974\0\u1950\0\u1998\0\u19bc\0\u19e0"+
    "\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc\0\u1b00"+
    "\0\u1b24\0\u1b48\0\u1b6c\0\u1b90\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20"+
    "\0\u1c44";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\42\3\1\4\1\5\1\6\2\3"+
    "\1\7\1\10\4\3\1\11\30\3\1\0\42\3\44\0"+
    "\1\3\1\4\43\3\1\0\2\3\1\12\40\3\1\0"+
    "\2\3\1\13\10\3\1\14\27\3\1\0\6\3\1\15"+
    "\34\3\1\0\12\3\1\16\30\3\1\0\2\3\1\17"+
    "\40\3\1\0\3\3\1\20\37\3\1\0\14\3\1\21"+
    "\26\3\1\0\3\3\1\22\37\3\1\0\2\3\1\13"+
    "\40\3\1\0\3\3\1\23\37\3\1\0\36\3\1\24"+
    "\4\3\1\0\7\3\1\20\33\3\1\0\1\3\1\25"+
    "\41\3\1\0\11\3\1\20\24\3\1\24\4\3\1\0"+
    "\37\3\1\26\3\3\1\0\7\3\1\27\33\3\1\0"+
    "\37\3\1\30\3\3\1\0\10\3\1\20\31\3\1\31"+
    "\1\0\1\3\14\31\1\32\1\31\1\3\7\31\1\33"+
    "\1\34\1\35\1\36\2\34\4\3\1\31\1\37\1\0"+
    "\1\40\14\37\1\40\1\37\1\40\15\37\4\40\1\37"+
    "\1\3\1\0\16\3\1\41\10\3\6\41\5\3\1\37"+
    "\1\0\1\40\14\37\1\40\1\37\1\40\15\37\1\42"+
    "\3\40\2\37\1\0\1\40\14\37\1\40\1\37\1\40"+
    "\7\37\6\43\1\42\3\40\2\37\1\0\1\40\14\37"+
    "\1\40\1\37\1\40\7\37\6\44\1\42\3\40\2\37"+
    "\1\0\1\40\14\37\1\40\1\37\1\40\7\37\1\44"+
    "\1\43\3\44\1\45\1\42\3\40\1\37\1\46\1\0"+
    "\1\40\14\46\1\40\1\46\1\40\15\46\4\40\2\46"+
    "\1\0\1\3\14\46\1\47\1\46\1\3\15\46\4\3"+
    "\1\46\1\3\1\0\16\3\1\31\10\3\6\31\5\3"+
    "\1\46\1\0\1\3\14\46\1\47\1\46\1\3\7\46"+
    "\1\50\1\51\1\52\1\53\2\51\4\3\2\46\1\0"+
    "\1\40\14\46\1\40\1\46\1\40\15\46\1\42\3\40"+
    "\2\46\1\0\1\40\14\46\1\40\1\46\1\40\7\46"+
    "\6\54\1\42\3\40\2\46\1\0\1\40\14\46\1\40"+
    "\1\46\1\40\7\46\1\54\1\46\4\54\1\42\3\40"+
    "\1\46\1\55\1\0\1\56\14\55\1\56\1\55\1\56"+
    "\15\55\4\56\1\55\1\3\1\0\16\3\1\57\10\3"+
    "\6\57\5\3\1\55\1\0\1\56\14\55\1\56\1\55"+
    "\1\56\15\55\1\60\3\56\2\55\1\0\1\56\14\55"+
    "\1\56\1\55\1\56\7\55\6\61\1\60\3\56\2\55"+
    "\1\0\1\56\14\55\1\56\1\55\1\56\7\55\6\62"+
    "\1\60\3\56\2\55\1\0\1\56\14\55\1\56\1\55"+
    "\1\56\7\55\1\62\1\61\3\62\1\63\1\60\3\56"+
    "\2\55\1\0\1\56\14\55\1\56\1\55\1\56\15\55"+
    "\1\64\3\56\2\55\1\0\1\56\3\55\1\65\1\66"+
    "\1\55\1\67\2\55\1\70\1\71\1\55\1\56\1\55"+
    "\1\56\1\72\2\55\1\73\1\74\1\55\1\75\6\55"+
    "\4\56\1\55\1\46\1\0\1\3\3\46\1\76\1\77"+
    "\1\46\1\100\2\46\1\101\1\102\1\46\1\47\1\46"+
    "\1\3\1\103\2\46\1\104\1\105\1\46\1\106\6\46"+
    "\4\3\1\46\1\3\1\0\16\3\1\46\10\3\6\46"+
    "\5\3\1\46\1\0\1\3\3\46\1\76\1\77\1\46"+
    "\1\100\2\46\1\101\1\102\1\46\1\47\1\46\1\3"+
    "\1\103\2\46\1\104\1\105\1\46\1\106\1\107\1\110"+
    "\1\111\1\112\2\110\4\3\1\46\1\55\1\0\1\56"+
    "\3\55\1\65\1\66\1\55\1\67\2\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\2\55\1\73\1\74"+
    "\1\55\1\75\6\55\1\60\3\56\2\55\1\0\1\56"+
    "\3\55\1\65\1\66\1\55\1\67\2\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\2\55\1\73\1\74"+
    "\1\55\1\75\6\61\1\60\3\56\2\55\1\0\1\56"+
    "\3\55\1\65\1\66\1\55\1\67\2\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\2\55\1\73\1\74"+
    "\1\55\1\75\1\61\1\55\4\61\1\60\3\56\1\55"+
    "\1\46\1\0\1\3\3\46\1\76\1\77\1\46\1\100"+
    "\2\46\1\101\1\102\1\46\1\47\1\46\1\3\1\103"+
    "\2\46\1\104\1\105\1\46\1\106\1\50\1\51\1\52"+
    "\1\53\2\51\4\3\1\46\1\55\1\0\1\56\3\55"+
    "\1\65\1\66\1\55\1\67\1\113\1\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\2\55\1\73\1\74"+
    "\1\55\1\75\6\55\4\56\2\55\1\0\1\56\3\55"+
    "\1\65\1\66\1\114\1\67\2\55\1\70\1\71\1\55"+
    "\1\56\1\55\1\56\1\72\2\55\1\73\1\74\1\55"+
    "\1\75\6\55\4\56\2\55\1\0\1\56\3\55\1\65"+
    "\1\66\1\55\1\67\2\55\1\70\1\71\1\55\1\56"+
    "\1\55\1\56\1\72\2\55\1\115\1\74\1\55\1\75"+
    "\6\55\4\56\2\55\1\0\1\56\3\55\1\65\1\66"+
    "\1\55\1\116\2\55\1\70\1\71\1\55\1\56\1\55"+
    "\1\56\1\72\2\55\1\73\1\74\1\55\1\75\6\55"+
    "\4\56\2\55\1\0\1\56\1\55\1\113\1\55\1\65"+
    "\1\66\1\55\1\67\2\55\1\70\1\71\1\55\1\56"+
    "\1\55\1\56\1\72\2\55\1\73\1\74\1\55\1\75"+
    "\6\55\4\56\2\55\1\0\1\56\1\113\2\55\1\65"+
    "\1\66\1\117\1\67\2\55\1\70\1\71\1\55\1\56"+
    "\1\55\1\56\1\72\2\55\1\73\1\74\1\55\1\75"+
    "\6\55\4\56\2\55\1\0\1\56\3\55\1\65\1\66"+
    "\1\55\1\120\2\55\1\70\1\71\1\55\1\56\1\55"+
    "\1\56\1\72\2\55\1\73\1\74\1\55\1\75\6\55"+
    "\4\56\2\55\1\0\1\56\3\55\1\65\1\66\1\55"+
    "\1\67\2\55\1\70\1\71\1\55\1\56\1\55\1\56"+
    "\1\72\2\55\1\73\1\74\1\113\1\75\6\55\4\56"+
    "\2\55\1\0\1\56\2\55\1\113\1\65\1\66\1\55"+
    "\1\67\2\55\1\70\1\71\1\55\1\56\1\55\1\56"+
    "\1\72\2\55\1\73\1\74\1\55\1\75\6\55\4\56"+
    "\2\55\1\0\1\56\7\55\1\113\4\55\1\56\1\55"+
    "\1\56\15\55\4\56\2\55\1\0\1\56\5\55\1\114"+
    "\6\55\1\56\1\55\1\56\15\55\4\56\2\55\1\0"+
    "\1\56\14\55\1\56\1\55\1\56\3\55\1\121\11\55"+
    "\4\56\2\55\1\0\1\56\6\55\1\122\5\55\1\56"+
    "\1\55\1\56\15\55\4\56\2\55\1\0\1\56\1\55"+
    "\1\113\12\55\1\56\1\55\1\56\15\55\4\56\2\55"+
    "\1\0\1\56\1\113\4\55\1\117\6\55\1\56\1\55"+
    "\1\56\15\55\4\56\2\55\1\0\1\56\6\55\1\113"+
    "\5\55\1\56\1\55\1\56\15\55\4\56\2\55\1\0"+
    "\1\56\14\55\1\56\1\55\1\56\5\55\1\113\7\55"+
    "\4\56\2\55\1\0\1\56\2\55\1\113\11\55\1\56"+
    "\1\55\1\56\15\55\4\56\2\55\1\0\1\56\14\55"+
    "\1\56\1\55\1\56\15\55\1\123\3\56\2\55\1\0"+
    "\1\56\14\55\1\56\1\55\1\56\7\55\6\124\1\123"+
    "\3\56\2\55\1\0\1\56\14\55\1\56\1\55\1\56"+
    "\7\55\6\125\1\123\3\56\2\55\1\0\1\56\14\55"+
    "\1\56\1\55\1\56\7\55\1\125\1\124\3\125\1\126"+
    "\1\123\3\56\2\55\1\127\1\130\3\55\1\65\1\66"+
    "\1\55\1\67\2\55\1\70\1\71\1\55\1\56\1\55"+
    "\1\56\1\72\2\55\1\73\1\74\1\55\1\75\6\55"+
    "\1\56\1\131\1\132\1\56\1\133\1\55\1\0\1\56"+
    "\3\55\1\65\1\66\1\55\1\67\2\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\1\55\1\113\1\73"+
    "\1\74\1\55\1\75\6\55\4\56\2\55\1\0\1\56"+
    "\3\55\1\65\1\66\1\55\1\120\2\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\2\55\1\73\1\134"+
    "\1\55\1\75\6\55\4\56\2\55\1\127\1\130\1\55"+
    "\1\113\1\55\1\65\1\66\1\55\1\67\2\55\1\70"+
    "\1\71\1\55\1\56\1\55\1\56\1\72\2\55\1\115"+
    "\1\74\1\55\1\75\6\55\1\56\1\131\1\132\1\56"+
    "\1\133\1\55\1\0\1\56\3\55\1\65\1\66\1\55"+
    "\1\67\2\55\1\70\1\71\1\55\1\56\1\55\1\56"+
    "\1\72\1\113\1\55\1\73\1\74\1\55\1\75\6\55"+
    "\4\56\2\55\1\127\1\130\3\55\1\65\1\66\1\55"+
    "\1\67\2\55\1\70\1\71\1\55\1\56\1\55\1\56"+
    "\1\72\2\55\1\115\1\74\1\55\1\75\6\55\1\56"+
    "\1\131\1\132\1\56\1\133\1\55\1\0\1\56\3\55"+
    "\1\65\1\66\1\55\1\67\2\55\1\70\1\71\1\55"+
    "\1\56\1\55\1\56\1\72\2\55\1\73\1\134\1\55"+
    "\1\75\6\55\4\56\2\55\1\127\1\130\1\55\1\113"+
    "\1\55\1\65\1\66\1\55\1\67\2\55\1\70\1\71"+
    "\1\55\1\56\1\55\1\56\1\72\2\55\1\73\1\74"+
    "\1\55\1\75\6\55\1\56\1\131\1\132\1\56\1\133"+
    "\1\46\1\0\1\3\3\46\1\76\1\77\1\46\1\100"+
    "\2\46\1\101\1\102\1\46\1\47\1\46\1\3\1\103"+
    "\2\46\1\104\1\105\1\46\1\106\1\135\1\136\1\137"+
    "\1\140\2\136\4\3\1\46\1\55\1\0\1\56\3\55"+
    "\1\65\1\66\1\55\1\67\2\55\1\70\1\71\1\55"+
    "\1\56\1\55\1\56\1\72\2\55\1\73\1\74\1\55"+
    "\1\75\6\55\1\123\3\56\2\55\1\0\1\56\3\55"+
    "\1\65\1\66\1\55\1\67\2\55\1\70\1\71\1\55"+
    "\1\56\1\55\1\56\1\72\2\55\1\73\1\74\1\55"+
    "\1\75\6\124\1\123\3\56\2\55\1\0\1\56\3\55"+
    "\1\65\1\66\1\55\1\67\2\55\1\70\1\71\1\55"+
    "\1\56\1\55\1\56\1\72\2\55\1\73\1\74\1\55"+
    "\1\75\1\124\1\55\4\124\1\123\3\56\1\55\1\46"+
    "\1\141\1\3\3\46\1\76\1\77\1\46\1\100\2\46"+
    "\1\101\1\102\1\46\1\47\1\46\1\3\1\103\2\46"+
    "\1\104\1\105\1\46\1\106\6\46\4\3\2\46\1\0"+
    "\1\3\3\46\1\76\1\77\1\46\1\100\2\46\1\101"+
    "\1\102\1\46\1\47\1\46\1\3\1\103\2\46\1\104"+
    "\1\105\1\46\1\106\1\46\5\142\4\3\1\46\1\143"+
    "\1\127\1\144\3\143\1\145\1\146\1\143\1\147\2\143"+
    "\1\150\1\151\1\143\1\152\1\143\1\3\1\153\2\143"+
    "\1\154\1\155\1\143\1\156\6\143\4\3\1\157\1\55"+
    "\1\127\1\130\3\55\1\65\1\66\1\55\1\67\2\55"+
    "\1\70\1\71\1\55\1\56\1\55\1\56\1\72\2\55"+
    "\1\73\1\74\1\113\1\75\6\55\1\56\1\131\1\132"+
    "\1\56\1\133\1\55\1\127\1\130\14\55\1\56\1\55"+
    "\1\56\15\55\1\56\1\131\1\132\1\56\1\133\1\55"+
    "\1\127\1\130\14\55\1\56\1\55\1\56\7\55\6\113"+
    "\1\56\1\131\1\132\1\56\1\133\1\55\1\127\1\130"+
    "\14\55\1\56\1\55\1\56\7\55\6\160\1\56\1\131"+
    "\1\132\1\56\1\133\1\55\1\127\1\130\14\55\1\56"+
    "\1\55\1\56\7\55\1\160\1\113\3\160\1\161\1\56"+
    "\1\131\1\132\1\56\1\133\1\55\1\127\1\130\14\55"+
    "\1\56\1\55\1\56\7\55\6\162\2\56\1\132\1\56"+
    "\1\133\1\163\1\127\1\130\14\163\1\164\1\163\1\56"+
    "\15\163\1\165\1\56\1\132\1\56\1\166\1\3\1\141"+
    "\42\3\1\163\1\127\1\130\7\163\1\167\4\163\1\164"+
    "\1\163\1\56\15\163\1\165\1\56\1\132\1\56\1\166"+
    "\1\163\1\127\1\130\5\163\1\170\6\163\1\164\1\163"+
    "\1\56\15\163\1\165\1\56\1\132\1\56\1\166\1\163"+
    "\1\127\1\130\14\163\1\164\1\163\1\56\3\163\1\171"+
    "\11\163\1\165\1\56\1\132\1\56\1\166\1\163\1\127"+
    "\1\130\6\163\1\172\5\163\1\164\1\163\1\56\15\163"+
    "\1\165\1\56\1\132\1\56\1\166\1\163\1\127\1\130"+
    "\1\163\1\167\12\163\1\164\1\163\1\56\15\163\1\165"+
    "\1\56\1\132\1\56\1\166\1\3\1\0\16\3\1\173"+
    "\10\3\6\173\5\3\1\163\1\127\1\130\1\167\4\163"+
    "\1\174\6\163\1\164\1\163\1\56\15\163\1\165\1\56"+
    "\1\132\1\56\1\166\1\163\1\127\1\130\6\163\1\167"+
    "\5\163\1\164\1\163\1\56\15\163\1\165\1\56\1\132"+
    "\1\56\1\166\1\163\1\127\1\130\14\163\1\164\1\163"+
    "\1\56\5\163\1\167\7\163\1\165\1\56\1\132\1\56"+
    "\1\166\1\163\1\127\1\130\2\163\1\167\11\163\1\164"+
    "\1\163\1\56\15\163\1\165\1\56\1\132\1\56\1\166"+
    "\1\55\1\127\1\130\3\55\1\65\1\66\1\55\1\67"+
    "\2\55\1\70\1\71\1\55\1\56\1\55\1\56\1\72"+
    "\2\55\1\73\1\74\1\55\1\75\6\113\1\56\1\131"+
    "\1\132\1\56\1\133\1\55\1\127\1\130\3\55\1\65"+
    "\1\66\1\55\1\67\2\55\1\70\1\71\1\55\1\56"+
    "\1\55\1\56\1\72\2\55\1\73\1\74\1\55\1\75"+
    "\1\113\1\55\4\113\1\56\1\131\1\132\1\56\1\133"+
    "\1\55\1\127\1\130\3\55\1\65\1\66\1\55\1\67"+
    "\2\55\1\70\1\71\1\55\1\56\1\55\1\56\1\72"+
    "\2\55\1\73\1\74\1\55\1\75\6\175\2\56\1\132"+
    "\1\56\1\133\1\163\1\127\1\130\3\163\1\176\1\177"+
    "\1\163\1\200\2\163\1\201\1\202\1\163\1\164\1\163"+
    "\1\56\1\203\2\163\1\204\1\205\1\163\1\206\6\163"+
    "\1\165\1\56\1\132\1\56\1\166\1\46\1\0\1\3"+
    "\3\46\1\76\1\77\1\46\1\100\2\46\1\101\1\102"+
    "\1\46\1\47\1\207\1\3\1\103\2\46\1\104\1\105"+
    "\1\46\1\106\6\207\4\3\1\46\1\210\1\0\1\3"+
    "\3\210\1\211\1\212\1\210\1\213\2\210\1\214\1\215"+
    "\1\210\1\216\1\210\1\3\1\217\2\210\1\220\1\221"+
    "\1\210\1\222\6\210\4\3\1\210\1\163\1\127\1\130"+
    "\3\163\1\176\1\177\1\163\1\200\2\163\1\201\1\202"+
    "\1\163\1\164\1\163\1\56\1\203\2\163\1\204\1\205"+
    "\1\163\1\206\6\163\1\165\1\131\1\132\1\56\1\166"+
    "\1\163\1\127\1\130\3\163\1\176\1\177\1\163\1\200"+
    "\2\163\1\201\1\202\1\163\1\164\1\163\1\56\1\203"+
    "\1\163\1\167\1\204\1\205\1\163\1\206\6\163\1\165"+
    "\1\56\1\132\1\56\1\166\1\163\1\127\1\130\3\163"+
    "\1\176\1\177\1\163\1\200\2\163\1\201\1\202\1\163"+
    "\1\164\1\163\1\56\1\203\2\163\1\204\1\223\1\163"+
    "\1\206\6\163\1\165\1\56\1\132\1\56\1\166\1\163"+
    "\1\127\1\130\1\163\1\167\1\163\1\176\1\177\1\163"+
    "\1\200\2\163\1\201\1\202\1\163\1\164\1\163\1\56"+
    "\1\203\2\163\1\204\1\205\1\163\1\206\6\163\1\165"+
    "\1\131\1\132\1\56\1\166\1\3\1\0\16\3\1\143"+
    "\10\3\6\143\5\3\1\163\1\127\1\130\3\163\1\176"+
    "\1\177\1\163\1\200\2\163\1\201\1\202\1\163\1\164"+
    "\1\163\1\56\1\203\1\167\1\163\1\204\1\205\1\163"+
    "\1\206\6\163\1\165\1\56\1\132\1\56\1\166\1\55"+
    "\1\127\1\130\3\55\1\65\1\66\1\55\1\67\2\55"+
    "\1\70\1\71\1\55\1\56\1\55\1\56\1\72\2\55"+
    "\1\73\1\74\1\55\1\75\6\224\2\56\1\132\1\56"+
    "\1\133\1\163\1\127\1\130\3\163\1\176\1\177\1\163"+
    "\1\200\1\167\1\163\1\201\1\202\1\163\1\164\1\163"+
    "\1\56\1\203\2\163\1\204\1\205\1\163\1\206\6\163"+
    "\1\165\1\56\1\132\1\56\1\166\1\163\1\127\1\130"+
    "\3\163\1\176\1\177\1\170\1\200\2\163\1\201\1\202"+
    "\1\163\1\164\1\163\1\56\1\203\2\163\1\204\1\205"+
    "\1\163\1\206\6\163\1\165\1\56\1\132\1\56\1\166"+
    "\1\163\1\127\1\130\3\163\1\176\1\177\1\163\1\200"+
    "\2\163\1\201\1\202\1\163\1\164\1\163\1\56\1\203"+
    "\2\163\1\225\1\205\1\163\1\206\6\163\1\165\1\56"+
    "\1\132\1\56\1\166\1\163\1\127\1\130\3\163\1\176"+
    "\1\177\1\163\1\226\2\163\1\201\1\202\1\163\1\164"+
    "\1\163\1\56\1\203\2\163\1\204\1\205\1\163\1\206"+
    "\6\163\1\165\1\56\1\132\1\56\1\166\1\163\1\127"+
    "\1\130\1\163\1\167\1\163\1\176\1\177\1\163\1\200"+
    "\2\163\1\201\1\202\1\163\1\164\1\163\1\56\1\203"+
    "\2\163\1\204\1\205\1\163\1\206\6\163\1\165\1\56"+
    "\1\132\1\56\1\166\1\163\1\127\1\130\1\167\2\163"+
    "\1\176\1\177\1\174\1\200\2\163\1\201\1\202\1\163"+
    "\1\164\1\163\1\56\1\203\2\163\1\204\1\205\1\163"+
    "\1\206\6\163\1\165\1\56\1\132\1\56\1\166\1\163"+
    "\1\127\1\130\3\163\1\176\1\177\1\163\1\227\2\163"+
    "\1\201\1\202\1\163\1\164\1\163\1\56\1\203\2\163"+
    "\1\204\1\205\1\163\1\206\6\163\1\165\1\56\1\132"+
    "\1\56\1\166\1\163\1\127\1\130\3\163\1\176\1\177"+
    "\1\163\1\200\2\163\1\201\1\202\1\163\1\164\1\163"+
    "\1\56\1\203\2\163\1\204\1\205\1\167\1\206\6\163"+
    "\1\165\1\56\1\132\1\56\1\166\1\163\1\127\1\130"+
    "\2\163\1\167\1\176\1\177\1\163\1\200\2\163\1\201"+
    "\1\202\1\163\1\164\1\163\1\56\1\203\2\163\1\204"+
    "\1\205\1\163\1\206\6\163\1\165\1\56\1\132\1\56"+
    "\1\166\1\55\1\0\1\56\14\55\1\56\1\163\1\56"+
    "\7\55\6\163\4\56\1\55\1\230\1\127\1\130\14\230"+
    "\1\231\1\230\1\56\15\230\3\56\1\232\1\233\1\230"+
    "\1\127\1\130\7\230\1\234\4\230\1\231\1\230\1\56"+
    "\15\230\3\56\1\232\1\233\1\230\1\127\1\130\5\230"+
    "\1\235\6\230\1\231\1\230\1\56\15\230\3\56\1\232"+
    "\1\233\1\230\1\127\1\130\14\230\1\231\1\230\1\56"+
    "\3\230\1\236\11\230\3\56\1\232\1\233\1\230\1\127"+
    "\1\130\6\230\1\237\5\230\1\231\1\230\1\56\15\230"+
    "\3\56\1\232\1\233\1\230\1\127\1\130\1\230\1\234"+
    "\12\230\1\231\1\230\1\56\15\230\3\56\1\232\1\233"+
    "\1\3\1\0\16\3\1\240\10\3\6\240\5\3\1\230"+
    "\1\127\1\130\1\234\4\230\1\241\6\230\1\231\1\230"+
    "\1\56\15\230\3\56\1\232\1\233\1\230\1\127\1\130"+
    "\6\230\1\234\5\230\1\231\1\230\1\56\15\230\3\56"+
    "\1\232\1\233\1\230\1\127\1\130\14\230\1\231\1\230"+
    "\1\56\5\230\1\234\7\230\3\56\1\232\1\233\1\230"+
    "\1\127\1\130\2\230\1\234\11\230\1\231\1\230\1\56"+
    "\15\230\3\56\1\232\1\233\1\163\1\127\1\130\3\163"+
    "\1\176\1\177\1\163\1\200\2\163\1\201\1\202\1\163"+
    "\1\164\1\163\1\56\1\203\2\163\1\204\1\205\1\167"+
    "\1\206\6\163\1\165\1\131\1\132\1\56\1\166\1\55"+
    "\1\127\1\130\3\55\1\65\1\66\1\55\1\67\2\55"+
    "\1\70\1\71\1\55\1\56\1\55\1\56\1\72\2\55"+
    "\1\73\1\74\1\55\1\75\6\55\2\56\1\132\1\56"+
    "\1\133\1\163\1\127\1\130\3\163\1\176\1\177\1\163"+
    "\1\227\2\163\1\201\1\202\1\163\1\164\1\163\1\56"+
    "\1\203\2\163\1\204\1\223\1\163\1\206\6\163\1\165"+
    "\1\56\1\132\1\56\1\166\1\163\1\127\1\130\1\163"+
    "\1\167\1\163\1\176\1\177\1\163\1\200\2\163\1\201"+
    "\1\202\1\163\1\164\1\163\1\56\1\203\2\163\1\225"+
    "\1\205\1\163\1\206\6\163\1\165\1\131\1\132\1\56"+
    "\1\166\1\163\1\127\1\130\3\163\1\176\1\177\1\163"+
    "\1\200\2\163\1\201\1\202\1\163\1\164\1\163\1\56"+
    "\1\203\2\163\1\225\1\205\1\163\1\206\6\163\1\165"+
    "\1\131\1\132\1\56\1\166\1\230\1\127\1\130\3\230"+
    "\1\242\1\243\1\230\1\244\2\230\1\245\1\246\1\230"+
    "\1\231\1\230\1\56\1\247\2\230\1\250\1\251\1\230"+
    "\1\252\6\230\3\56\1\232\1\233\1\46\1\0\1\3"+
    "\3\46\1\76\1\77\1\46\1\100\2\46\1\101\1\102"+
    "\1\46\1\47\1\253\1\3\1\103\2\46\1\104\1\105"+
    "\1\46\1\106\6\253\4\3\1\46\1\254\1\0\1\3"+
    "\3\254\1\255\1\256\1\254\1\257\2\254\1\260\1\261"+
    "\1\254\1\262\1\254\1\3\1\263\2\254\1\264\1\265"+
    "\1\254\1\266\6\254\4\3\1\254\1\230\1\127\1\130"+
    "\3\230\1\242\1\243\1\230\1\244\2\230\1\245\1\246"+
    "\1\230\1\231\1\230\1\56\1\247\2\230\1\250\1\251"+
    "\1\230\1\252\6\230\1\56\1\131\1\132\1\232\1\233"+
    "\1\230\1\127\1\130\3\230\1\242\1\243\1\230\1\244"+
    "\2\230\1\245\1\246\1\230\1\231\1\230\1\56\1\247"+
    "\1\230\1\234\1\250\1\251\1\230\1\252\6\230\3\56"+
    "\1\232\1\233\1\230\1\127\1\130\3\230\1\242\1\243"+
    "\1\230\1\244\2\230\1\245\1\246\1\230\1\231\1\230"+
    "\1\56\1\247\2\230\1\250\1\267\1\230\1\252\6\230"+
    "\3\56\1\232\1\233\1\230\1\127\1\130\1\230\1\234"+
    "\1\230\1\242\1\243\1\230\1\244\2\230\1\245\1\246"+
    "\1\230\1\231\1\230\1\56\1\247\2\230\1\250\1\251"+
    "\1\230\1\252\6\230\1\56\1\131\1\132\1\232\1\233"+
    "\1\3\1\0\16\3\1\210\10\3\6\210\5\3\1\230"+
    "\1\127\1\130\3\230\1\242\1\243\1\230\1\244\2\230"+
    "\1\245\1\246\1\230\1\231\1\230\1\56\1\247\1\234"+
    "\1\230\1\250\1\251\1\230\1\252\6\230\3\56\1\232"+
    "\1\233\1\230\1\127\1\130\3\230\1\242\1\243\1\230"+
    "\1\244\1\234\1\230\1\245\1\246\1\230\1\231\1\230"+
    "\1\56\1\247\2\230\1\250\1\251\1\230\1\252\6\230"+
    "\3\56\1\232\1\233\1\230\1\127\1\130\3\230\1\242"+
    "\1\243\1\235\1\244\2\230\1\245\1\246\1\230\1\231"+
    "\1\230\1\56\1\247\2\230\1\250\1\251\1\230\1\252"+
    "\6\230\3\56\1\232\1\233\1\230\1\127\1\130\3\230"+
    "\1\242\1\243\1\230\1\244\2\230\1\245\1\246\1\230"+
    "\1\231\1\230\1\56\1\247\2\230\1\270\1\251\1\230"+
    "\1\252\6\230\3\56\1\232\1\233\1\230\1\127\1\130"+
    "\3\230\1\242\1\243\1\230\1\271\2\230\1\245\1\246"+
    "\1\230\1\231\1\230\1\56\1\247\2\230\1\250\1\251"+
    "\1\230\1\252\6\230\3\56\1\232\1\233\1\230\1\127"+
    "\1\130\1\230\1\234\1\230\1\242\1\243\1\230\1\244"+
    "\2\230\1\245\1\246\1\230\1\231\1\230\1\56\1\247"+
    "\2\230\1\250\1\251\1\230\1\252\6\230\3\56\1\232"+
    "\1\233\1\230\1\127\1\130\1\234\2\230\1\242\1\243"+
    "\1\241\1\244\2\230\1\245\1\246\1\230\1\231\1\230"+
    "\1\56\1\247\2\230\1\250\1\251\1\230\1\252\6\230"+
    "\3\56\1\232\1\233\1\230\1\127\1\130\3\230\1\242"+
    "\1\243\1\230\1\272\2\230\1\245\1\246\1\230\1\231"+
    "\1\230\1\56\1\247\2\230\1\250\1\251\1\230\1\252"+
    "\6\230\3\56\1\232\1\233\1\230\1\127\1\130\3\230"+
    "\1\242\1\243\1\230\1\244\2\230\1\245\1\246\1\230"+
    "\1\231\1\230\1\56\1\247\2\230\1\250\1\251\1\234"+
    "\1\252\6\230\3\56\1\232\1\233\1\230\1\127\1\130"+
    "\2\230\1\234\1\242\1\243\1\230\1\244\2\230\1\245"+
    "\1\246\1\230\1\231\1\230\1\56\1\247\2\230\1\250"+
    "\1\251\1\230\1\252\6\230\3\56\1\232\1\233\1\55"+
    "\1\0\1\56\14\55\1\56\1\230\1\56\7\55\6\230"+
    "\4\56\1\55\1\273\1\127\1\130\14\273\1\274\1\273"+
    "\1\56\15\273\4\56\1\275\1\273\1\127\1\130\7\273"+
    "\1\276\4\273\1\274\1\273\1\56\15\273\4\56\1\275"+
    "\1\273\1\127\1\130\5\273\1\277\6\273\1\274\1\273"+
    "\1\56\15\273\4\56\1\275\1\273\1\127\1\130\14\273"+
    "\1\274\1\273\1\56\3\273\1\300\11\273\4\56\1\275"+
    "\1\273\1\127\1\130\6\273\1\301\5\273\1\274\1\273"+
    "\1\56\15\273\4\56\1\275\1\273\1\127\1\130\1\273"+
    "\1\276\12\273\1\274\1\273\1\56\15\273\4\56\1\275"+
    "\1\3\1\0\16\3\1\302\10\3\6\302\5\3\1\273"+
    "\1\127\1\130\1\276\4\273\1\303\6\273\1\274\1\273"+
    "\1\56\15\273\4\56\1\275\1\273\1\127\1\130\6\273"+
    "\1\276\5\273\1\274\1\273\1\56\15\273\4\56\1\275"+
    "\1\273\1\127\1\130\14\273\1\274\1\273\1\56\5\273"+
    "\1\276\7\273\4\56\1\275\1\273\1\127\1\130\2\273"+
    "\1\276\11\273\1\274\1\273\1\56\15\273\4\56\1\275"+
    "\1\230\1\127\1\130\3\230\1\242\1\243\1\230\1\244"+
    "\2\230\1\245\1\246\1\230\1\231\1\230\1\56\1\247"+
    "\2\230\1\250\1\251\1\234\1\252\6\230\1\56\1\131"+
    "\1\132\1\232\1\233\1\230\1\127\1\130\3\230\1\242"+
    "\1\243\1\230\1\272\2\230\1\245\1\246\1\230\1\231"+
    "\1\230\1\56\1\247\2\230\1\250\1\267\1\230\1\252"+
    "\6\230\3\56\1\232\1\233\1\230\1\127\1\130\1\230"+
    "\1\234\1\230\1\242\1\243\1\230\1\244\2\230\1\245"+
    "\1\246\1\230\1\231\1\230\1\56\1\247\2\230\1\270"+
    "\1\251\1\230\1\252\6\230\1\56\1\131\1\132\1\232"+
    "\1\233\1\230\1\127\1\130\3\230\1\242\1\243\1\230"+
    "\1\244\2\230\1\245\1\246\1\230\1\231\1\230\1\56"+
    "\1\247\2\230\1\270\1\251\1\230\1\252\6\230\1\56"+
    "\1\131\1\132\1\232\1\233\1\273\1\127\1\130\3\273"+
    "\1\304\1\305\1\273\1\306\2\273\1\307\1\310\1\273"+
    "\1\274\1\273\1\56\1\311\2\273\1\312\1\313\1\273"+
    "\1\314\6\273\4\56\1\275\1\46\1\0\1\3\3\46"+
    "\1\76\1\77\1\46\1\100\2\46\1\101\1\102\1\46"+
    "\1\47\1\315\1\3\1\103\2\46\1\104\1\105\1\46"+
    "\1\106\6\315\4\3\1\46\1\273\1\127\1\130\3\273"+
    "\1\304\1\305\1\273\1\306\2\273\1\307\1\310\1\273"+
    "\1\274\1\273\1\56\1\311\2\273\1\312\1\313\1\273"+
    "\1\314\6\273\1\56\1\131\1\132\1\56\1\275\1\273"+
    "\1\127\1\130\3\273\1\304\1\305\1\273\1\306\2\273"+
    "\1\307\1\310\1\273\1\274\1\273\1\56\1\311\1\273"+
    "\1\276\1\312\1\313\1\273\1\314\6\273\4\56\1\275"+
    "\1\273\1\127\1\130\3\273\1\304\1\305\1\273\1\306"+
    "\2\273\1\307\1\310\1\273\1\274\1\273\1\56\1\311"+
    "\2\273\1\312\1\316\1\273\1\314\6\273\4\56\1\275"+
    "\1\273\1\127\1\130\1\273\1\276\1\273\1\304\1\305"+
    "\1\273\1\306\2\273\1\307\1\310\1\273\1\274\1\273"+
    "\1\56\1\311\2\273\1\312\1\313\1\273\1\314\6\273"+
    "\1\56\1\131\1\132\1\56\1\275\1\3\1\0\16\3"+
    "\1\254\10\3\6\254\5\3\1\273\1\127\1\130\3\273"+
    "\1\304\1\305\1\273\1\306\2\273\1\307\1\310\1\273"+
    "\1\274\1\273\1\56\1\311\1\276\1\273\1\312\1\313"+
    "\1\273\1\314\6\273\4\56\1\275\1\273\1\127\1\130"+
    "\3\273\1\304\1\305\1\273\1\306\1\276\1\273\1\307"+
    "\1\310\1\273\1\274\1\273\1\56\1\311\2\273\1\312"+
    "\1\313\1\273\1\314\6\273\4\56\1\275\1\273\1\127"+
    "\1\130\3\273\1\304\1\305\1\277\1\306\2\273\1\307"+
    "\1\310\1\273\1\274\1\273\1\56\1\311\2\273\1\312"+
    "\1\313\1\273\1\314\6\273\4\56\1\275\1\273\1\127"+
    "\1\130\3\273\1\304\1\305\1\273\1\306\2\273\1\307"+
    "\1\310\1\273\1\274\1\273\1\56\1\311\2\273\1\317"+
    "\1\313\1\273\1\314\6\273\4\56\1\275\1\273\1\127"+
    "\1\130\3\273\1\304\1\305\1\273\1\320\2\273\1\307"+
    "\1\310\1\273\1\274\1\273\1\56\1\311\2\273\1\312"+
    "\1\313\1\273\1\314\6\273\4\56\1\275\1\273\1\127"+
    "\1\130\1\273\1\276\1\273\1\304\1\305\1\273\1\306"+
    "\2\273\1\307\1\310\1\273\1\274\1\273\1\56\1\311"+
    "\2\273\1\312\1\313\1\273\1\314\6\273\4\56\1\275"+
    "\1\273\1\127\1\130\1\276\2\273\1\304\1\305\1\303"+
    "\1\306\2\273\1\307\1\310\1\273\1\274\1\273\1\56"+
    "\1\311\2\273\1\312\1\313\1\273\1\314\6\273\4\56"+
    "\1\275\1\273\1\127\1\130\3\273\1\304\1\305\1\273"+
    "\1\321\2\273\1\307\1\310\1\273\1\274\1\273\1\56"+
    "\1\311\2\273\1\312\1\313\1\273\1\314\6\273\4\56"+
    "\1\275\1\273\1\127\1\130\3\273\1\304\1\305\1\273"+
    "\1\306\2\273\1\307\1\310\1\273\1\274\1\273\1\56"+
    "\1\311\2\273\1\312\1\313\1\276\1\314\6\273\4\56"+
    "\1\275\1\273\1\127\1\130\2\273\1\276\1\304\1\305"+
    "\1\273\1\306\2\273\1\307\1\310\1\273\1\274\1\273"+
    "\1\56\1\311\2\273\1\312\1\313\1\273\1\314\6\273"+
    "\4\56\1\275\1\55\1\0\1\56\14\55\1\56\1\273"+
    "\1\56\7\55\6\273\4\56\1\55\1\273\1\127\1\130"+
    "\3\273\1\304\1\305\1\273\1\306\2\273\1\307\1\310"+
    "\1\273\1\274\1\273\1\56\1\311\2\273\1\312\1\313"+
    "\1\276\1\314\6\273\1\56\1\131\1\132\1\56\1\275"+
    "\1\273\1\127\1\130\3\273\1\304\1\305\1\273\1\321"+
    "\2\273\1\307\1\310\1\273\1\274\1\273\1\56\1\311"+
    "\2\273\1\312\1\316\1\273\1\314\6\273\4\56\1\275"+
    "\1\273\1\127\1\130\1\273\1\276\1\273\1\304\1\305"+
    "\1\273\1\306\2\273\1\307\1\310\1\273\1\274\1\273"+
    "\1\56\1\311\2\273\1\317\1\313\1\273\1\314\6\273"+
    "\1\56\1\131\1\132\1\56\1\275\1\273\1\127\1\130"+
    "\3\273\1\304\1\305\1\273\1\306\2\273\1\307\1\310"+
    "\1\273\1\274\1\273\1\56\1\311\2\273\1\317\1\313"+
    "\1\273\1\314\6\273\1\56\1\131\1\132\1\56\1\275";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\122\1\1\11\11\1\1\11\160\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Http(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Http(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 104) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { ;
          }
        case 5: break;
        case 4: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { System.out.println("Correct url: " + yytext());
          }
        case 6: break;
        case 3: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { System.out.println("Correct url: " + yytext());
          }
        case 7: break;
        case 1: 
          { System.out.println("Incorrect url: " + yytext());
          }
        case 8: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Http <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Http scanner = null;
        try {
          scanner = new Http( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
