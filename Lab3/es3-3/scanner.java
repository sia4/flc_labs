/* The following code was generated by JFlex 1.4.3 on 13/01/18 16:30 */

/* Import of the CUP library */
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/01/18 16:30 from the specification file
 * <tt>scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comment = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\26\2\0\1\33\22\0\1\23\1\40\1\32\1\31"+
    "\1\0\1\50\1\42\1\25\1\51\1\52\1\44\1\43\1\60\1\30"+
    "\1\0\1\45\12\24\1\61\1\57\1\37\1\36\1\37\2\0\4\35"+
    "\1\27\25\35\1\53\1\34\1\54\1\0\1\35\1\0\1\16\1\17"+
    "\1\20\1\6\1\5\1\15\1\3\1\13\1\2\1\35\1\47\1\11"+
    "\1\35\1\4\1\12\2\35\1\14\1\1\1\10\1\7\1\22\1\46"+
    "\1\21\2\35\1\55\1\41\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\2\1\1\1\3\1\0\1\1\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\2"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\1\5\2\1\24\16\2\2\0\1\25"+
    "\1\26\2\0\1\27\1\0\1\6\1\30\1\31\1\32"+
    "\1\2\1\1\1\33\4\2\1\34\11\2\1\35\5\2"+
    "\4\0\1\27\5\2\1\36\3\2\1\37\2\2\1\40"+
    "\1\2\1\41\1\42\1\3\2\0\11\2\1\43\1\3"+
    "\3\0\1\44\1\45\1\46\2\2\1\47\1\3\3\0"+
    "\1\50\1\2\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u044c"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u0384"+
    "\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384"+
    "\0\u0384\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\310\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0384\0\u0384\0\u0a28\0\u0a5a\0\u0384\0\u0a8c\0\u0384"+
    "\0\u0384\0\u0384\0\u0384\0\u0abe\0\u0af0\0\u0384\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\310\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\310\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u041a\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\310\0\u1068\0\u109a\0\u10cc"+
    "\0\310\0\u10fe\0\u1130\0\310\0\u1162\0\310\0\310\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\310\0\u0384\0\u13ec\0\u141e\0\u1450"+
    "\0\310\0\310\0\310\0\u1482\0\u14b4\0\310\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\310\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u14e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\2\5\1\6\1\7\1\10\1\5"+
    "\1\11\2\5\1\12\1\13\1\14\1\15\1\16\1\5"+
    "\1\17\1\20\1\21\1\22\1\23\1\5\1\24\1\25"+
    "\1\26\2\0\1\5\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\5\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\44\52"+
    "\1\53\15\52\1\0\1\5\1\54\5\5\1\55\2\5"+
    "\1\56\7\5\1\0\1\5\2\0\1\5\5\0\1\5"+
    "\10\0\1\57\1\5\13\0\3\5\1\60\10\5\1\61"+
    "\5\5\1\0\1\5\2\0\1\5\5\0\1\5\10\0"+
    "\2\5\13\0\22\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\10\5\1\62\7\5\1\63"+
    "\1\5\1\0\1\5\2\0\1\5\5\0\1\5\10\0"+
    "\2\5\13\0\4\5\1\64\4\5\1\65\10\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\3\5\1\66\16\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\11\5\1\67\10\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\4\5\1\70\15\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\10\5\1\71\1\72\10\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\6\5\1\73\13\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\13\5\1\74\6\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\12\5\1\75\2\5\1\76\4\5\1\0\1\5"+
    "\2\0\1\5\5\0\1\5\10\0\2\5\13\0\11\5"+
    "\1\77\10\5\1\0\1\5\2\0\1\5\5\0\1\5"+
    "\10\0\2\5\35\0\1\20\62\0\1\21\1\100\34\0"+
    "\26\101\1\0\33\101\112\0\1\102\5\0\1\103\25\0"+
    "\1\104\3\0\1\105\53\0\26\26\1\0\3\26\1\106"+
    "\1\0\1\107\25\26\36\0\1\110\64\0\1\111\62\0"+
    "\1\111\55\0\1\103\4\0\1\112\54\0\1\103\61\0"+
    "\1\103\5\0\1\113\16\0\12\5\1\114\7\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\12\0"+
    "\44\52\1\0\15\52\44\115\1\53\1\116\14\115\1\0"+
    "\2\5\1\117\17\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\15\5\1\120\4\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\11\5\1\121\10\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\1\5\1\122\20\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\7\5\1\123\12\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\1\124\21\5\1\0\1\5"+
    "\2\0\1\5\5\0\1\5\10\0\2\5\13\0\7\5"+
    "\1\125\12\5\1\0\1\5\2\0\1\5\5\0\1\5"+
    "\10\0\2\5\13\0\14\5\1\126\5\5\1\0\1\5"+
    "\2\0\1\5\5\0\1\5\10\0\2\5\13\0\6\5"+
    "\1\127\13\5\1\0\1\5\2\0\1\5\5\0\1\5"+
    "\10\0\2\5\13\0\1\130\21\5\1\0\1\5\2\0"+
    "\1\5\5\0\1\5\10\0\2\5\13\0\3\5\1\131"+
    "\16\5\1\0\1\5\2\0\1\5\5\0\1\5\10\0"+
    "\2\5\13\0\2\5\1\132\4\5\1\133\12\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\11\5\1\134\10\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\13\5\1\135\6\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\7\5\1\136\12\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\4\5\1\137\15\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\15\5\1\140\4\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\1\141\21\5\1\0\1\5"+
    "\2\0\1\5\5\0\1\5\10\0\2\5\13\0\1\5"+
    "\1\142\20\5\1\0\1\5\2\0\1\5\5\0\1\5"+
    "\10\0\2\5\12\0\26\143\1\0\33\143\25\0\1\144"+
    "\40\0\1\145\62\0\1\146\54\0\26\26\1\0\3\26"+
    "\1\147\1\0\1\107\25\26\1\0\1\5\1\150\20\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\12\0\44\115\2\0\14\115\1\0\3\5\1\151\16\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\7\5\1\152\12\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\13\5\1\153\6\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\7\5\1\154\12\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\4\5\1\155\15\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\4\5\1\156\15\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\15\5\1\157\4\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\16\5\1\160\3\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\1\5\1\54\20\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\2\5\1\161\17\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\1\5\1\162\20\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\6\5\1\163\13\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\15\5\1\60\4\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\11\5\1\164\10\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\15\5\1\165\4\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\13\5\1\123\6\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\4\5\1\166\15\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\5\5\1\167\14\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\37\0\1\170\60\0\1\170"+
    "\55\0\1\171\56\0\1\172\45\0\10\5\1\173\11\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\4\5\1\174\15\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\1\5\1\175\20\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\7\5\1\161\12\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\17\5\1\176\2\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\13\5\1\177\6\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\6\5\1\200\13\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\10\5\1\201\11\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\1\202\21\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\13\5\1\203\6\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\13\0\22\5\1\0\1\5\2\0"+
    "\1\5\5\0\1\5\10\0\1\5\1\204\17\0\1\205"+
    "\16\0\1\170\2\0\1\206\43\0\1\207\52\0\1\210"+
    "\60\0\4\5\1\211\15\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\5\5\1\212\14\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\17\5\1\164\2\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\12\5\1\213\7\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\3\5\1\164\16\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\10\5\1\214\11\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\4\5\1\123\15\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\13\0\7\5\1\215\12\5"+
    "\1\0\1\5\2\0\1\5\5\0\1\5\10\0\2\5"+
    "\13\0\3\5\1\216\16\5\1\0\1\5\2\0\1\5"+
    "\5\0\1\5\10\0\2\5\36\0\1\217\1\220\43\0"+
    "\1\221\56\0\1\222\56\0\7\5\1\223\12\5\1\0"+
    "\1\5\2\0\1\5\5\0\1\5\10\0\2\5\13\0"+
    "\4\5\1\224\15\5\1\0\1\5\2\0\1\5\5\0"+
    "\1\5\10\0\2\5\36\0\1\217\62\0\1\225\2\0"+
    "\1\226\37\0\1\222\60\0\1\227\55\0\13\5\1\164"+
    "\6\5\1\0\1\5\2\0\1\5\5\0\1\5\10\0"+
    "\2\5\36\0\1\217\1\225\61\0\1\230\34\0\26\227"+
    "\1\23\33\227";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\20\1\1\0\1\11\1\1\2\0\2\1\3\0"+
    "\4\1\12\11\26\1\2\0\2\11\2\0\1\11\1\0"+
    "\4\11\2\1\1\11\24\1\4\0\22\1\2\0\12\1"+
    "\1\11\3\0\7\1\3\0\2\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return new Symbol(sym.ASSOP);
          }
        case 41: break;
        case 10: 
          { return new Symbol(sym.MOD);
          }
        case 42: break;
        case 14: 
          { return new Symbol(sym.SBCLOSED);
          }
        case 43: break;
        case 11: 
          { return new Symbol(sym.RBOPEN);
          }
        case 44: break;
        case 8: 
          { return new Symbol(sym.TIMES);
          }
        case 45: break;
        case 19: 
          { return new Symbol(sym.COLON);
          }
        case 46: break;
        case 13: 
          { return new Symbol(sym.SBOPEN);
          }
        case 47: break;
        case 9: 
          { return new Symbol(sym.DIVIDE);
          }
        case 48: break;
        case 20: 
          { return new Symbol(sym.IF);
          }
        case 49: break;
        case 36: 
          { return new Symbol(sym.WHILE);
          }
        case 50: break;
        case 31: 
          { return new Symbol(sym.LENG_MODIFIER);
          }
        case 51: break;
        case 35: 
          { return new Symbol(sym.BREAK);
          }
        case 52: break;
        case 37: 
          { return new Symbol(sym.SIGN_MODIFIER);
          }
        case 53: break;
        case 24: 
          { return new Symbol(sym.LOGOP);
          }
        case 54: break;
        case 29: 
          { return new Symbol(sym.FOR);
          }
        case 55: break;
        case 4: 
          { return new Symbol(sym.MINUS);
          }
        case 56: break;
        case 7: 
          { return new Symbol(sym.PLUS);
          }
        case 57: break;
        case 27: 
          { yybegin(YYINITIAL);
          }
        case 58: break;
        case 2: 
          { return new Symbol(sym.ID);
          }
        case 59: break;
        case 1: 
          { ;
          }
        case 60: break;
        case 33: 
          { return new Symbol(sym.CASE);
          }
        case 61: break;
        case 28: 
          { return new Symbol(sym.TYPE);
          }
        case 62: break;
        case 34: 
          { return new Symbol(sym.VOID);
          }
        case 63: break;
        case 30: 
          { return new Symbol(sym.ELSE);
          }
        case 64: break;
        case 17: 
          { return new Symbol(sym.SEMICOLON);
          }
        case 65: break;
        case 3: 
          { return new Symbol(sym.CONST);
          }
        case 66: break;
        case 18: 
          { return new Symbol(sym.COMMA);
          }
        case 67: break;
        case 5: 
          { return new Symbol(sym.EQUALS);
          }
        case 68: break;
        case 39: 
          { return new Symbol(sym.RETURN);
          }
        case 69: break;
        case 40: 
          { return new Symbol(sym.DEFAULT);
          }
        case 70: break;
        case 32: 
          { return new Symbol(sym.STORAGE_SPEC);
          }
        case 71: break;
        case 6: 
          { return new Symbol(sym.RELOP);
          }
        case 72: break;
        case 16: 
          { return new Symbol(sym.CBCLOSED);
          }
        case 73: break;
        case 21: 
          { return new Symbol(sym.DECR);
          }
        case 74: break;
        case 23: 
          { return new Symbol(sym.STRINGCONST);
          }
        case 75: break;
        case 12: 
          { return new Symbol(sym.RBCLOSED);
          }
        case 76: break;
        case 38: 
          { return new Symbol(sym.SWITCH);
          }
        case 77: break;
        case 15: 
          { return new Symbol(sym.CBOPEN);
          }
        case 78: break;
        case 26: 
          { yybegin(comment);
          }
        case 79: break;
        case 25: 
          { return new Symbol(sym.INCR);
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
