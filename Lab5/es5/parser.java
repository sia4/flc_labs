
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 14 18:52:08 CET 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Vector;

/** CUP v0.10k generated parser.
  * @version Sun Jan 14 18:52:08 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\003\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\007\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\004\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\010\005\000\002\011" +
    "\005\000\002\013\003\000\002\013\003\000\002\015\003" +
    "\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\016\004\023\005\007\006\016\010\004\013" +
    "\024\015\022\001\002\000\016\004\023\005\025\006\027" +
    "\010\004\013\024\015\022\001\002\000\030\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\014\uffe7\016\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\001\002\000\030\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\016\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\001\002\000\022\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\017\075\020\uffe3\023\uffe3\024\uffe3" +
    "\001\002\000\006\020\073\024\072\001\002\000\020\007" +
    "\041\010\043\011\045\012\042\020\ufff8\023\044\024\ufff8" +
    "\001\002\000\004\002\071\001\002\000\006\020\ufffd\024" +
    "\ufffd\001\002\000\006\020\ufffa\024\ufffa\001\002\000\006" +
    "\020\ufffc\024\ufffc\001\002\000\022\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\017\067\020\uffe2\021\uffe2\024\uffe2\001\002" +
    "\000\006\020\ufffe\024\ufffe\001\002\000\020\007\031\010" +
    "\033\011\035\012\032\020\ufff9\021\036\024\ufff9\001\002" +
    "\000\006\020\ufffb\024\ufffb\001\002\000\016\004\023\005" +
    "\025\006\027\010\004\013\024\015\022\001\002\000\030" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\016\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\001\002\000\016" +
    "\004\023\005\025\006\027\010\004\013\024\015\022\001" +
    "\002\000\030\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\001" +
    "\002\000\016\007\041\010\043\011\045\012\042\014\062" +
    "\023\044\001\002\000\030\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\001\002\000\016\007\031\010\033\011\035\012" +
    "\032\014\034\021\036\001\002\000\016\004\023\005\025" +
    "\006\027\010\004\013\024\015\022\001\002\000\016\004" +
    "\023\005\025\006\027\010\004\013\024\015\022\001\002" +
    "\000\016\004\023\005\025\006\027\010\004\013\024\015" +
    "\022\001\002\000\030\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\014\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\001\002\000\016\004\023\005\025\006\027\010\004" +
    "\013\024\015\022\001\002\000\016\004\023\005\025\006" +
    "\027\010\004\013\024\015\022\001\002\000\014\007\041" +
    "\010\043\011\045\012\042\023\044\001\002\000\030\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\001\002\000\016\004" +
    "\023\005\025\006\027\010\004\013\024\015\022\001\002" +
    "\000\016\004\023\005\025\006\027\010\004\013\024\015" +
    "\022\001\002\000\016\004\023\005\025\006\027\010\004" +
    "\013\024\015\022\001\002\000\016\004\023\005\025\006" +
    "\027\010\004\013\024\015\022\001\002\000\016\004\023" +
    "\005\025\006\027\010\004\013\024\015\022\001\002\000" +
    "\030\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\016\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\044\024\uffec\001\002\000" +
    "\030\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\016\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\001\002\000" +
    "\030\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\016\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\001\002\000" +
    "\014\007\031\010\033\011\035\012\032\021\036\001\002" +
    "\000\030\007\uffee\010\uffee\011\045\012\042\014\uffee\016" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\044\024\uffee\001\002" +
    "\000\030\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed\016" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\044\024\uffed\001\002" +
    "\000\030\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\016" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\001\002" +
    "\000\030\007\uffef\010\uffef\011\045\012\042\014\uffef\016" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\044\024\uffef\001\002" +
    "\000\030\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\016" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\044\024\ufff2\001\002" +
    "\000\030\007\ufff6\010\ufff6\011\035\012\032\014\ufff6\016" +
    "\ufff6\020\ufff6\021\036\022\ufff6\023\ufff6\024\ufff6\001\002" +
    "\000\030\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\044\024\ufff3\001\002" +
    "\000\030\007\ufff7\010\ufff7\011\035\012\032\014\ufff7\016" +
    "\ufff7\020\ufff7\021\036\022\ufff7\023\ufff7\024\ufff7\001\002" +
    "\000\030\007\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\001\002" +
    "\000\016\007\041\010\043\011\045\012\042\022\064\023" +
    "\044\001\002\000\016\004\023\005\025\006\027\010\004" +
    "\013\024\015\022\001\002\000\016\007\041\010\043\011" +
    "\045\012\042\016\066\023\044\001\002\000\030\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\014\uffe1\016\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\001\002\000\016\004\023" +
    "\005\025\006\027\010\004\013\024\015\022\001\002\000" +
    "\020\007\031\010\033\011\035\012\032\020\uffe5\021\036" +
    "\024\uffe5\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002\000\016\004\023\005\007\006\016\010\004" +
    "\013\024\015\022\001\002\000\006\020\uffff\024\uffff\001" +
    "\002\000\016\004\023\005\025\006\027\010\004\013\024" +
    "\015\022\001\002\000\020\007\041\010\043\011\045\012" +
    "\042\020\uffe6\023\044\024\uffe6\001\002\000\030\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\014\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\030\003\011\004\007\005\016\006\020\007" +
    "\013\010\012\011\014\012\010\013\004\014\017\015\005" +
    "\001\001\000\012\012\076\013\004\014\050\015\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\062\013\004\014\050\015\005\001\001" +
    "\000\002\001\001\000\012\012\025\013\004\014\027\015" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\036\013\004\014" +
    "\060\015\005\001\001\000\012\012\057\013\004\014\050" +
    "\015\005\001\001\000\012\012\036\013\004\014\056\015" +
    "\005\001\001\000\002\001\001\000\012\012\055\013\004" +
    "\014\050\015\005\001\001\000\012\012\036\013\004\014" +
    "\037\015\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\054\013\004\014\050\015\005\001\001\000" +
    "\012\012\052\013\004\014\053\015\005\001\001\000\012" +
    "\012\051\013\004\014\050\015\005\001\001\000\012\012" +
    "\047\013\004\014\050\015\005\001\001\000\012\012\045" +
    "\013\004\014\046\015\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\064\013\004\014\050\015\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\036\013\004\014" +
    "\067\015\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\073\006\020\007\013\010" +
    "\012\011\014\012\010\013\004\014\017\015\005\001\001" +
    "\000\002\001\001\000\012\012\075\013\004\014\050\015" +
    "\005\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbol_table = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap symbol_table;

    public void syntax_error(Symbol current_symbol) {
      StringBuffer m = new StringBuffer("Error");

      if (current_symbol.left != -1) {                
        m.append(" in line " + (current_symbol.left+1));   
	  m.append(", column " + (current_symbol.right+1));
      }
      m.append(", symbol: " + (current_symbol));
      m.append(" : Syntax Error");
   
  	System.err.println(m);
    } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vector ::= LBS scalar_expr CM scalar_expr RBS 
            { parser.Tree.reduce(5,"vector",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Double[2];
	RESULT[0] =  a;
	RESULT[1] =  b;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*vector*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vector ::= VECTOR_VAR 
            { parser.Tree.reduce(1,"vector",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			
	RESULT = (Double[]) parser.symbol_table.get(a); 

              CUP$parser$result = new java_cup.runtime.Symbol(11/*vector*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // scalar ::= SCALAR_VAR 
            { parser.Tree.reduce(1,"scalar",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = (Double)parser.symbol_table.get(a); 

              CUP$parser$result = new java_cup.runtime.Symbol(9/*scalar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // scalar ::= CONST 
            { parser.Tree.reduce(1,"scalar",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = a;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*scalar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vector_assign ::= VECTOR_VAR EQUALS vect_expr 
            { parser.Tree.reduce(3,"vector_assign",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	parser.symbol_table.put(a,b);
	System.out.println("assignment: " + a + "->[" + b[0]+ "," + b[1]+"]");

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vector_assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // scalar_assign ::= SCALAR_VAR EQUALS scalar_expr 
            { parser.Tree.reduce(3,"scalar_assign",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	parser.symbol_table.put(a,b);
	System.out.println("assignment: " + a + "->" + b);

              CUP$parser$result = new java_cup.runtime.Symbol(6/*scalar_assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scalar_expr ::= scalar 
            { parser.Tree.reduce(1,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scalar_expr ::= vect_expr PT vect_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(a[0].doubleValue() * b[0].doubleValue() + a[1].doubleValue() * b[1].doubleValue());

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scalar_expr ::= LBR scalar_expr RBR 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = e;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scalar_expr ::= scalar_expr EXP scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(Math.pow(b.doubleValue(), e.doubleValue()));

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // scalar_expr ::= MINUS scalar_expr 
            { parser.Tree.reduce(2,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(- a.doubleValue()); 

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // scalar_expr ::= scalar_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(a.doubleValue()/ b.doubleValue()); 

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scalar_expr ::= scalar_expr PROD scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(a.doubleValue()* b.doubleValue()); 

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scalar_expr ::= scalar_expr MINUS scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(a.doubleValue()- b.doubleValue()); 

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scalar_expr ::= scalar_expr PLUS scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	RESULT = new Double(a.doubleValue()+ b.doubleValue()); 

              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vect_expr ::= vector 
            { parser.Tree.reduce(1,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=a; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vect_expr ::= LBR vect_expr RBR 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vect_expr ::= vect_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Double[2];
		RESULT[0] =  new Double (a[0].doubleValue() / b.doubleValue());
		RESULT[1] =  new Double (a[1].doubleValue() / b.doubleValue());

              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vect_expr ::= vect_expr PROD scalar_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Double[2];
		RESULT[0] = new Double (a[0].doubleValue() * b.doubleValue());
		RESULT[1] = new Double (a[1].doubleValue() * b.doubleValue());

              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vect_expr ::= scalar_expr DIV vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Double[2];
		RESULT[0] = new Double (a.doubleValue() / b[0].doubleValue());
		RESULT[1] = new Double (a.doubleValue() / b[1].doubleValue());

              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vect_expr ::= scalar_expr PROD vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Double[2];
		RESULT[0] = new Double (a.doubleValue() * b[0].doubleValue());
		RESULT[1] = new Double (a.doubleValue() * b[1].doubleValue());


              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vect_expr ::= vect_expr MINUS vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Double[2];
		RESULT[0] = new Double (a[0].doubleValue() - b[0].doubleValue());
		RESULT[1] = new Double (a[1].doubleValue() - b[1].doubleValue());

              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vect_expr ::= vect_expr PLUS vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new Double[2];
		RESULT[0] = new Double (a[0].doubleValue() + b[0].doubleValue());
		RESULT[1] = new Double (a[1].doubleValue() + b[1].doubleValue());
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*vect_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // scalar_expr_ ::= scalar_expr 
            { parser.Tree.reduce(1,"scalar_expr_",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	System.out.println("scalar expression: " + e.doubleValue()); 

              CUP$parser$result = new java_cup.runtime.Symbol(5/*scalar_expr_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vect_expr_ ::= vect_expr 
            { parser.Tree.reduce(1,"vect_expr_",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] e = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
	System.out.println("vector expression: [" + e[0] + ","+ e[1]+"]");

              CUP$parser$result = new java_cup.runtime.Symbol(4/*vect_expr_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= scalar_expr_ 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= vect_expr_ 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= vector_assign 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= scalar_assign 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr 
            { parser.Tree.reduce(1,"expr_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list PV expr 
            { parser.Tree.reduce(3,"expr_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sessione ::= expr_list QP 
            { parser.Tree.reduce(2,"sessione",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*sessione*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sessione EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

