
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 14 18:55:09 CET 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Vector;

/** CUP v0.10k generated parser.
  * @version Sun Jan 14 18:55:09 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\010\004\000" +
    "\002\011\004\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\006" +
    "\006\000\002\007\006\000\002\014\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\016\004\ufffe\005\ufffe\010\ufffe\017\ufffe\021" +
    "\ufffe\022\ufffe\001\002\000\016\004\011\005\015\010\007" +
    "\017\017\021\023\022\012\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\006\004\073\021\074" +
    "\001\002\000\016\004\ufffc\005\ufffc\010\ufffc\017\ufffc\021" +
    "\ufffc\022\ufffc\001\002\000\024\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\020\ufff1\001" +
    "\002\000\020\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea" +
    "\015\070\016\uffea\001\002\000\016\004\ufffa\005\ufffa\010" +
    "\ufffa\017\ufffa\021\ufffa\022\ufffa\001\002\000\016\004\ufffd" +
    "\005\ufffd\010\ufffd\017\ufffd\021\ufffd\022\ufffd\001\002\000" +
    "\014\004\011\005\015\010\007\021\026\022\027\001\002" +
    "\000\024\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\016\uffeb\020\uffeb\001\002\000\004\002\000" +
    "\001\002\000\016\004\ufffb\005\ufffb\010\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\001\002\000\016\007\034\010\035\011\033" +
    "\012\036\014\032\016\063\001\002\000\016\007\041\010" +
    "\042\011\040\012\043\013\044\016\062\001\002\000\020" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\025\016" +
    "\ufff0\001\002\000\016\004\uffff\005\uffff\010\uffff\017\uffff" +
    "\021\uffff\022\uffff\001\002\000\014\004\011\005\015\010" +
    "\007\021\026\022\027\001\002\000\024\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\020" +
    "\ufff0\001\002\000\024\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\016\uffea\020\uffea\001\002\000" +
    "\016\007\041\010\042\011\040\012\043\013\044\016\061" +
    "\001\002\000\014\007\034\010\035\011\033\012\036\014" +
    "\032\001\002\000\014\004\011\005\015\010\007\021\026" +
    "\022\027\001\002\000\014\004\011\005\015\010\007\021" +
    "\026\022\027\001\002\000\014\004\011\005\015\010\007" +
    "\021\026\022\027\001\002\000\014\004\011\005\015\010" +
    "\007\021\026\022\027\001\002\000\014\004\011\005\015" +
    "\010\007\021\026\022\027\001\002\000\024\006\uffe8\007" +
    "\041\010\042\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\020\uffe8\001\002\000\014\004\011\005\015\010\007\021" +
    "\026\022\027\001\002\000\014\004\011\005\015\010\007" +
    "\021\026\022\027\001\002\000\014\004\011\005\015\010" +
    "\007\021\026\022\027\001\002\000\014\004\011\005\015" +
    "\010\007\021\026\022\027\001\002\000\014\004\011\005" +
    "\015\010\007\021\026\022\027\001\002\000\024\006\ufff3" +
    "\007\041\010\042\011\040\012\043\013\ufff3\014\ufff3\016" +
    "\ufff3\020\ufff3\001\002\000\024\006\ufff4\007\041\010\042" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\020\ufff4\001" +
    "\002\000\024\006\uffe6\007\034\010\035\011\uffe6\012\uffe6" +
    "\013\uffe6\014\032\016\uffe6\020\uffe6\001\002\000\024\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\016\ufff6\020\ufff6\001\002\000\024\006\ufff7\007\ufff7\010" +
    "\042\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\020\ufff7" +
    "\001\002\000\024\006\ufff5\007\041\010\042\011\ufff5\012" +
    "\043\013\ufff5\014\ufff5\016\ufff5\020\ufff5\001\002\000\024" +
    "\006\uffe7\007\034\010\035\011\uffe7\012\036\013\uffe7\014" +
    "\032\016\uffe7\020\uffe7\001\002\000\014\007\041\010\042" +
    "\011\040\012\043\013\044\001\002\000\024\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\020\uffec\001\002\000\024\006\uffed\007\uffed\010\035\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\016\uffed\020\uffed\001\002" +
    "\000\024\006\uffe9\007\041\010\042\011\uffe9\012\043\013" +
    "\uffe9\014\uffe9\016\uffe9\020\uffe9\001\002\000\024\006\ufff2" +
    "\007\034\010\035\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016" +
    "\ufff2\020\ufff2\001\002\000\016\004\uffe5\005\uffe5\010\uffe5" +
    "\017\uffe5\021\uffe5\022\uffe5\001\002\000\016\004\ufff9\005" +
    "\ufff9\010\ufff9\017\ufff9\021\ufff9\022\ufff9\001\002\000\016" +
    "\004\ufff8\005\ufff8\010\ufff8\017\ufff8\021\ufff8\022\ufff8\001" +
    "\002\000\016\007\041\010\042\011\040\012\043\013\044" +
    "\020\065\001\002\000\014\004\011\005\015\010\007\021" +
    "\026\022\027\001\002\000\016\006\067\007\041\010\042" +
    "\011\040\012\043\013\044\001\002\000\024\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3" +
    "\020\uffe3\001\002\000\014\004\011\005\015\010\007\021" +
    "\026\022\027\001\002\000\016\007\034\010\035\011\033" +
    "\012\036\014\032\016\072\001\002\000\016\004\uffe4\005" +
    "\uffe4\010\uffe4\017\uffe4\021\uffe4\022\uffe4\001\002\000\024" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\016\uffef\020\uffef\001\002\000\024\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\016\uffee\020" +
    "\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\003\004\004\003\001\001\000\022\005" +
    "\023\006\017\007\012\010\013\011\007\012\021\013\020" +
    "\014\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\063\013\030\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\027" +
    "\013\030\014\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\053" +
    "\013\057\014\015\001\001\000\010\012\056\013\030\014" +
    "\015\001\001\000\010\012\053\013\055\014\015\001\001" +
    "\000\010\012\053\013\054\014\015\001\001\000\010\012" +
    "\036\013\030\014\015\001\001\000\002\001\001\000\010" +
    "\012\051\013\052\014\015\001\001\000\010\012\050\013" +
    "\030\014\015\001\001\000\010\012\047\013\030\014\015" +
    "\001\001\000\010\012\045\013\046\014\015\001\001\000" +
    "\010\012\044\013\030\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\065\013" +
    "\030\014\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\053\013\070\014\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    scalarTable = new HashMap<String, Double>();
	vectorTable = new HashMap<String, Double[]>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap <String, Double>scalarTable;
	public HashMap <String, Double[]>vectorTable;
    
	public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): " + message);
            } else System.err.print(": " + message);
        else System.err.print(": " + message);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vector ::= SOPEN op_between_scalars COMMA op_between_scalars SCLOSE 
            { parser.Tree.reduce(5,"vector",0);
              Double[] RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Double[2];
															RESULT[0]=v1;
															RESULT[1]=v2; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*vector*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vect_assign ::= VVAR EQUAL op_between_vectors SEMIC 
            { parser.Tree.reduce(4,"vect_assign",0);
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("assignment: " + name + "->["+X[0]+","+X[1]+"]"); parser.vectorTable.put(name, X); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*vect_assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scal_assign ::= SVAR EQUAL op_between_scalars SEMIC 
            { parser.Tree.reduce(4,"scal_assign",0);
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("assignment: " + name + "->"+val); parser.scalarTable.put(name, val); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*scal_assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_between_vectors ::= op_between_scalars DIV op_between_vectors 
            { parser.Tree.reduce(3,"op_between_vectors",0);
              Double[] RESULT = null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = y/X[0];
								RESULT[1] = y/X[1]; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_between_vectors ::= op_between_scalars STAR op_between_vectors 
            { parser.Tree.reduce(3,"op_between_vectors",0);
              Double[] RESULT = null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = X[0]*y;
								RESULT[1] = X[1]*y; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_between_vectors ::= op_between_vectors DIV op_between_scalars 
            { parser.Tree.reduce(3,"op_between_vectors",0);
              Double[] RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = X[0]/y;
								RESULT[1] = X[1]/y; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_between_vectors ::= op_between_vectors STAR op_between_scalars 
            { parser.Tree.reduce(3,"op_between_vectors",0);
              Double[] RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = X[0]*y;
				 				RESULT[1] = X[1]*y; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_between_vectors ::= VVAR 
            { parser.Tree.reduce(1,"op_between_vectors",0);
              Double[] RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT = parser.vectorTable.get(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_between_vectors ::= vector 
            { parser.Tree.reduce(1,"op_between_vectors",0);
              Double[] RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = X[0];
								RESULT[1] = X[1]; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_between_vectors ::= op_between_vectors MINUS op_between_vectors 
            { parser.Tree.reduce(3,"op_between_vectors",0);
              Double[] RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] Y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = X[0]-Y[0];
								RESULT[1] = X[1]-Y[1]; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_between_vectors ::= op_between_vectors PLUS op_between_vectors 
            { parser.Tree.reduce(3,"op_between_vectors",0);
              Double[] RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] Y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double[2];
								RESULT[0] = X[0]+Y[0];
								RESULT[1] = X[1]+Y[1]; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*op_between_vectors*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_between_scalars ::= MINUS SVAR 
            { parser.Tree.reduce(2,"op_between_scalars",0);
              Double RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -parser.scalarTable.get(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op_between_scalars ::= MINUS SCALAR 
            { parser.Tree.reduce(2,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -x; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op_between_scalars ::= SVAR 
            { parser.Tree.reduce(1,"op_between_scalars",0);
              Double RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.scalarTable.get(name); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op_between_scalars ::= SCALAR 
            { parser.Tree.reduce(1,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op_between_scalars ::= op_between_vectors POINT op_between_vectors 
            { parser.Tree.reduce(3,"op_between_scalars",0);
              Double RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] Y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(X[0]*Y[0]+X[1]*Y[1]); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op_between_scalars ::= op_between_scalars EXPON op_between_scalars 
            { parser.Tree.reduce(3,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Math.pow(x,y); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op_between_scalars ::= op_between_scalars DIV op_between_scalars 
            { parser.Tree.reduce(3,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x/y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op_between_scalars ::= op_between_scalars STAR op_between_scalars 
            { parser.Tree.reduce(3,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x*y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // op_between_scalars ::= op_between_scalars MINUS op_between_scalars 
            { parser.Tree.reduce(3,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x-y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // op_between_scalars ::= op_between_scalars PLUS op_between_scalars 
            { parser.Tree.reduce(3,"op_between_scalars",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x+y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*op_between_scalars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // op_between_vectors_line ::= op_between_vectors SEMIC 
            { parser.Tree.reduce(2,"op_between_vectors_line",0);
              Object RESULT = null;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] X = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							System.out.println("vector expression: [" + X[0] + ","+ X[1]+"]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*op_between_vectors_line*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // op_between_scalars_line ::= op_between_scalars SEMIC 
            { parser.Tree.reduce(2,"op_between_scalars_line",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							System.out.println("scalar expression: " + x.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*op_between_scalars_line*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // line ::= vect_assign 
            { parser.Tree.reduce(1,"line",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*line*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // line ::= scal_assign 
            { parser.Tree.reduce(1,"line",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*line*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // line ::= op_between_vectors_line 
            { parser.Tree.reduce(1,"line",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*line*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // line ::= op_between_scalars_line 
            { parser.Tree.reduce(1,"line",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*line*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // line_list ::= 
            { parser.Tree.reduce(0,"line_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*line_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // line_list ::= line_list line 
            { parser.Tree.reduce(2,"line_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*line_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= line_list QM 
            { parser.Tree.reduce(2,"prog",1);
              Object RESULT = null;
		 System.out.println("Programm correctly recognized"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

