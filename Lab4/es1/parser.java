
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jan 13 18:34:58 CET 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Sat Jan 13 18:34:58 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\006\004\000\002\006\004\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\010\005\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\013\004\000\002\014\005" +
    "\000\002\014\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\010\003\ufffe\007\ufffe\012\ufffe\001\002\000" +
    "\004\002\051\001\002\000\010\003\012\007\015\012\011" +
    "\001\002\000\010\002\ufffe\003\ufffe\012\ufffe\001\002\000" +
    "\006\012\011\013\042\001\002\000\012\002\uffff\003\uffff" +
    "\007\uffff\012\uffff\001\002\000\014\004\ufff1\005\ufff1\006" +
    "\ufff1\010\040\011\ufff1\001\002\000\006\004\034\005\035" +
    "\001\002\000\012\002\ufffc\003\ufffc\007\ufffc\012\ufffc\001" +
    "\002\000\006\004\026\005\027\001\002\000\006\003\020" +
    "\012\011\001\002\000\012\002\ufffd\003\ufffd\007\ufffd\012" +
    "\ufffd\001\002\000\006\004\ufff3\006\ufff3\001\002\000\004" +
    "\004\025\001\002\000\006\004\022\006\023\001\002\000" +
    "\010\002\ufff6\003\ufff6\012\ufff6\001\002\000\004\012\011" +
    "\001\002\000\006\004\ufff4\006\ufff4\001\002\000\010\002" +
    "\ufff5\003\ufff5\012\ufff5\001\002\000\012\002\ufffb\003\ufffb" +
    "\007\ufffb\012\ufffb\001\002\000\006\003\030\012\011\001" +
    "\002\000\004\004\033\001\002\000\006\004\032\006\023" +
    "\001\002\000\012\002\ufff9\003\ufff9\007\ufff9\012\ufff9\001" +
    "\002\000\012\002\ufff7\003\ufff7\007\ufff7\012\ufff7\001\002" +
    "\000\012\002\ufffa\003\ufffa\007\ufffa\012\ufffa\001\002\000" +
    "\004\012\011\001\002\000\006\004\037\006\023\001\002" +
    "\000\012\002\ufff8\003\ufff8\007\ufff8\012\ufff8\001\002\000" +
    "\006\012\ufff0\013\ufff0\001\002\000\006\006\uffed\011\uffed" +
    "\001\002\000\006\006\uffec\011\uffec\001\002\000\006\006" +
    "\045\011\046\001\002\000\006\006\uffee\011\uffee\001\002" +
    "\000\006\012\011\013\042\001\002\000\012\004\ufff2\005" +
    "\ufff2\006\ufff2\011\ufff2\001\002\000\006\006\uffef\011\uffef" +
    "\001\002\000\010\002\000\003\012\012\011\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\016\005\007\006\015\007\012\010\005\012\013" +
    "\013\006\001\001\000\004\004\047\001\001\000\012\012" +
    "\040\013\006\014\042\015\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\020\012\016\013\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\023\013\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\030\012\016\013\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\035\012\016\013\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\040\013\006\015\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\007" +
    "\006\015\007\012\012\013\013\006\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public static int fact_found  = 0;
    public static int error_found = 0;

    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): " + message);
            } else System.err.print(": " + message);
        else System.err.print(": " + message);
    }
    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    /* It returns the object of type Symbol in the top of the parser stack.
    */
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argument ::= VAR 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument ::= predicate 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arguments_list ::= argument 
            { parser.Tree.reduce(1,"arguments_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*arguments_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments_list ::= arguments_list COMMA argument 
            { parser.Tree.reduce(3,"arguments_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*arguments_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functor ::= ATOM OPEN_B 
            { parser.Tree.reduce(2,"functor",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*functor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicate ::= ATOM 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate ::= functor arguments_list CLOSE_B 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicates_list ::= predicate 
            { parser.Tree.reduce(1,"predicates_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*predicates_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicates_list ::= predicates_list COMMA predicate 
            { parser.Tree.reduce(3,"predicates_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*predicates_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // interrogation ::= INT_START error POINT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT = null;
		
					parser.report_error("Error in an interrogation\n",parser.getToken());
					parser.error_found = 1;
				
              CUP$parser$result = new java_cup.runtime.Symbol(6/*interrogation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // interrogation ::= INT_START predicates_list POINT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*interrogation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rule ::= predicate RULE_START error POINT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;
		
			parser.report_error("Error in a rule\n",parser.getToken());
			parser.error_found = 1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rule ::= error RULE_START predicates_list POINT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;
		
			parser.report_error("Error in a rule\n",parser.getToken());
			parser.error_found = 1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rule ::= predicate RULE_START predicates_list POINT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fact ::= error POINT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;
		
			parser.report_error("Error in a fact\n",parser.getToken());
			parser.error_found = 1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fact ::= predicate POINT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;
		parser.fact_found = 1; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // element ::= rule 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // element ::= fact 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elements_list ::= 
            { parser.Tree.reduce(0,"elements_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*elements_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elements_list ::= elements_list element 
            { parser.Tree.reduce(2,"elements_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*elements_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= elements_list interrogation elements_list 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;
		
		if(parser.fact_found == 0 || parser.error_found == 1 )
			System.out.println("Program correctly recognized, but errors are present"); 
		else
			System.out.println("Program correctly recognized");
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

