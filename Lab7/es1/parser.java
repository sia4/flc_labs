
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jan 15 13:10:14 CET 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;

/** CUP v0.10k generated parser.
  * @version Mon Jan 15 13:10:14 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\021\004\000\002\021\002\000\002\022\005" +
    "\000\002\022\005\000\002\026\002\000\002\024\006\000" +
    "\002\024\003\000\002\025\003\000\002\025\006\000\002" +
    "\023\003\000\002\023\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\006\000\002\005\005\000\002\005\004\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\007" +
    "\003\000\002\007\006\000\002\007\006\000\002\007\004" +
    "\000\002\011\011\000\002\011\006\000\002\011\011\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\016\002\000\002\017\002\000\002\012" +
    "\006\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\020\002\000\002\013\005\000" +
    "\002\013\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\006\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\024\002\ufffd\003\ufffd\005\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\036\ufffd\037\ufffd\041\ufffd\001\002\000\004" +
    "\002\206\001\002\000\024\002\000\003\023\005\012\032" +
    "\022\033\010\034\025\036\014\037\016\041\021\001\002" +
    "\000\024\002\ufff0\003\ufff0\004\ufff0\005\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\040\ufff0\041\ufff0\001\002\000\024\002\uffee" +
    "\003\uffee\004\uffee\005\uffee\032\uffee\033\uffee\034\uffee\040" +
    "\uffee\041\uffee\001\002\000\006\003\172\006\173\001\002" +
    "\000\004\016\165\001\002\000\016\003\160\005\012\032" +
    "\022\033\010\034\025\041\021\001\002\000\024\002\ufffe" +
    "\003\ufffe\005\ufffe\032\ufffe\033\ufffe\034\ufffe\036\ufffe\037" +
    "\ufffe\041\ufffe\001\002\000\006\003\ufff5\041\ufff5\001\002" +
    "\000\024\002\uffed\003\uffed\004\uffed\005\uffed\032\uffed\033" +
    "\uffed\034\uffed\040\uffed\041\uffed\001\002\000\006\003\ufff4" +
    "\041\ufff4\001\002\000\024\002\uffef\003\uffef\004\uffef\005" +
    "\uffef\032\uffef\033\uffef\034\uffef\040\uffef\041\uffef\001\002" +
    "\000\020\002\uffff\003\052\005\012\032\022\033\010\034" +
    "\025\041\021\001\002\000\046\003\uffe5\007\uffe5\010\151" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\001\002\000\006\003\057\006\060\001" +
    "\002\000\024\003\052\005\012\011\032\016\051\017\050" +
    "\032\022\033\010\034\025\041\021\001\002\000\006\003" +
    "\036\041\034\001\002\000\006\003\030\041\021\001\002" +
    "\000\022\002\ufff2\003\ufff2\004\ufff2\005\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\041\ufff2\001\002\000\004\017\033\001\002" +
    "\000\006\011\032\017\031\001\002\000\024\002\uffd1\003" +
    "\uffd1\004\uffd1\005\uffd1\032\uffd1\033\uffd1\034\uffd1\040\uffd1" +
    "\041\uffd1\001\002\000\044\003\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\001\002\000\024\002\uffd2\003\uffd2\004\uffd2\005\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\040\uffd2\041\uffd2\001\002\000" +
    "\010\010\045\017\ufff7\020\ufff7\001\002\000\006\017\042" +
    "\020\041\001\002\000\004\017\040\001\002\000\006\017" +
    "\ufff8\020\ufff8\001\002\000\024\002\ufffb\003\ufffb\005\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\036\ufffb\037\ufffb\041\ufffb\001" +
    "\002\000\004\041\ufffa\001\002\000\024\002\ufffc\003\ufffc" +
    "\005\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc\037\ufffc\041" +
    "\ufffc\001\002\000\004\041\034\001\002\000\006\017\ufff9" +
    "\020\ufff9\001\002\000\004\042\046\001\002\000\004\011" +
    "\047\001\002\000\006\017\ufff6\020\ufff6\001\002\000\024" +
    "\002\uffe9\003\uffe9\004\uffe9\005\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\040\uffe9\041\uffe9\001\002\000\004\003\054\001\002" +
    "\000\010\011\032\016\051\017\050\001\002\000\022\002" +
    "\ufff1\003\ufff1\004\ufff1\005\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\041\ufff1\001\002\000\004\017\055\001\002\000\024\002" +
    "\uffe6\003\uffe6\004\uffe6\005\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\040\uffe6\041\uffe6\001\002\000\016\003\uffda\005\uffda\032" +
    "\uffda\033\uffda\034\uffda\041\uffda\001\002\000\020\003\072" +
    "\006\064\013\061\031\070\041\021\042\062\043\065\001" +
    "\002\000\020\003\067\006\064\013\061\031\070\041\021" +
    "\042\062\043\065\001\002\000\006\042\136\043\135\001" +
    "\002\000\042\003\uffc1\007\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\001\002\000\042" +
    "\003\uffbf\007\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\001\002\000\020\003\132\006" +
    "\064\013\061\031\070\041\021\042\062\043\065\001\002" +
    "\000\042\003\uffc0\007\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\001\002\000\040\003" +
    "\127\007\130\012\100\013\074\014\076\015\075\016\077" +
    "\021\106\022\101\023\104\024\103\025\105\026\102\027" +
    "\073\030\107\001\002\000\006\007\126\011\032\001\002" +
    "\000\020\003\072\006\064\013\061\031\070\041\021\042" +
    "\062\043\065\001\002\000\042\003\uffc2\007\uffc2\012\100" +
    "\013\074\014\076\015\075\016\077\017\uffc2\021\106\022" +
    "\101\023\104\024\103\025\105\026\102\027\uffc2\030\uffc2" +
    "\001\002\000\004\011\032\001\002\000\020\003\072\006" +
    "\064\013\061\031\070\041\021\042\062\043\065\001\002" +
    "\000\020\003\072\006\064\013\061\031\070\041\021\042" +
    "\062\043\065\001\002\000\020\003\072\006\064\013\061" +
    "\031\070\041\021\042\062\043\065\001\002\000\020\003" +
    "\072\006\064\013\061\031\070\041\021\042\062\043\065" +
    "\001\002\000\004\016\120\001\002\000\020\003\072\006" +
    "\064\013\061\031\070\041\021\042\062\043\065\001\002" +
    "\000\020\003\072\006\064\013\061\031\070\041\021\042" +
    "\062\043\065\001\002\000\020\003\072\006\064\013\061" +
    "\031\070\041\021\042\062\043\065\001\002\000\020\003" +
    "\072\006\064\013\061\031\070\041\021\042\062\043\065" +
    "\001\002\000\020\003\072\006\064\013\061\031\070\041" +
    "\021\042\062\043\065\001\002\000\020\003\072\006\064" +
    "\013\061\031\070\041\021\042\062\043\065\001\002\000" +
    "\020\003\072\006\064\013\061\031\070\041\021\042\062" +
    "\043\065\001\002\000\020\003\072\006\064\013\061\031" +
    "\070\041\021\042\062\043\065\001\002\000\042\003\uffc3" +
    "\007\uffc3\012\100\013\074\014\076\015\075\016\077\017" +
    "\uffc3\021\106\022\101\023\104\024\103\025\105\026\102" +
    "\027\073\030\uffc3\001\002\000\042\003\uffc9\007\uffc9\012" +
    "\100\013\074\014\076\015\075\016\uffc9\017\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\001\002\000\042\003\uffc7\007\uffc7\012\100\013\074" +
    "\014\076\015\075\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\001\002" +
    "\000\042\003\uffc5\007\uffc5\012\100\013\074\014\076\015" +
    "\075\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\001\002\000\042\003" +
    "\uffc6\007\uffc6\012\100\013\074\014\076\015\075\016\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\001\002\000\042\003\uffc8\007\uffc8" +
    "\012\100\013\074\014\076\015\075\016\uffc8\017\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\001\002\000\042\003\uffca\007\uffca\012\100\013" +
    "\074\014\076\015\075\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\001" +
    "\002\000\042\003\uffcf\007\uffcf\012\uffcf\013\uffcf\014\076" +
    "\015\075\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\001\002\000\020" +
    "\003\072\006\064\013\061\031\070\041\021\042\062\043" +
    "\065\001\002\000\042\003\uffcb\007\uffcb\012\100\013\074" +
    "\014\076\015\075\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\001\002" +
    "\000\042\003\uffcd\007\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\001\002\000\042\003" +
    "\uffcc\007\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\001\002\000\042\003\uffce\007\uffce" +
    "\012\uffce\013\uffce\014\076\015\075\016\uffce\017\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\001\002\000\042\003\uffc4\007\uffc4\012\100\013" +
    "\074\014\076\015\075\016\077\017\uffc4\021\106\022\101" +
    "\023\104\024\103\025\105\026\102\027\uffc4\030\uffc4\001" +
    "\002\000\016\003\uffdd\005\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\041\uffdd\001\002\000\016\003\uffdb\005\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\041\uffdb\001\002\000\016\003\uffde\005\uffde" +
    "\032\uffde\033\uffde\034\uffde\041\uffde\001\002\000\036\007" +
    "\134\012\100\013\074\014\076\015\075\016\077\021\106" +
    "\022\101\023\104\024\103\025\105\026\102\027\073\030" +
    "\107\001\002\000\006\007\133\011\032\001\002\000\042" +
    "\003\uffbc\007\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\001\002\000\042\003\uffd0\007" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\001\002\000\042\003\uffbd\007\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\001\002\000\042\003\uffbe\007\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\001\002\000" +
    "\036\007\140\012\100\013\074\014\076\015\075\016\077" +
    "\021\106\022\101\023\104\024\103\025\105\026\102\027" +
    "\073\030\107\001\002\000\016\003\uffdc\005\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\041\uffdc\001\002\000\016\003\052\005" +
    "\012\032\022\033\010\034\025\041\021\001\002\000\024" +
    "\002\uffe0\003\144\004\uffe0\005\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\040\143\041\uffe0\001\002\000\016\003\uffd9\005\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\041\uffd9\001\002\000\016\003" +
    "\uffd9\005\uffd9\032\uffd9\033\uffd9\034\uffd9\041\uffd9\001\002" +
    "\000\016\003\052\005\012\032\022\033\010\034\025\041" +
    "\021\001\002\000\024\002\uffdf\003\uffdf\004\uffdf\005\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf\001\002\000" +
    "\016\003\052\005\012\032\022\033\010\034\025\041\021" +
    "\001\002\000\024\002\uffe1\003\uffe1\004\uffe1\005\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\001\002\000\010" +
    "\003\072\041\021\042\153\001\002\000\004\011\155\001" +
    "\002\000\004\011\154\001\002\000\044\003\uffe4\007\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\001\002\000\044\003\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\001\002\000\022\002\ufff3\003\ufff3\004\ufff3" +
    "\005\ufff3\032\ufff3\033\ufff3\034\ufff3\041\ufff3\001\002\000" +
    "\020\003\163\004\162\005\012\032\022\033\010\034\025" +
    "\041\021\001\002\000\026\003\052\004\161\005\012\011" +
    "\032\016\051\017\050\032\022\033\010\034\025\041\021" +
    "\001\002\000\024\002\uffea\003\uffea\004\uffea\005\uffea\032" +
    "\uffea\033\uffea\034\uffea\040\uffea\041\uffea\001\002\000\024" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\032\uffec\033\uffec\034" +
    "\uffec\040\uffec\041\uffec\001\002\000\012\004\164\011\032" +
    "\016\051\017\050\001\002\000\024\002\uffeb\003\uffeb\004" +
    "\uffeb\005\uffeb\032\uffeb\033\uffeb\034\uffeb\040\uffeb\041\uffeb" +
    "\001\002\000\020\003\167\006\064\013\061\031\070\041" +
    "\021\042\062\043\065\001\002\000\036\012\100\013\074" +
    "\014\076\015\075\016\077\017\171\021\106\022\101\023" +
    "\104\024\103\025\105\026\102\027\073\030\107\001\002" +
    "\000\006\011\032\017\170\001\002\000\024\002\uffe7\003" +
    "\uffe7\004\uffe7\005\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7" +
    "\041\uffe7\001\002\000\024\002\uffe8\003\uffe8\004\uffe8\005" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\040\uffe8\041\uffe8\001\002" +
    "\000\020\003\072\006\064\013\061\031\070\041\021\042" +
    "\062\043\065\001\002\000\020\003\200\006\064\013\061" +
    "\031\070\041\021\042\062\043\065\001\002\000\016\003" +
    "\uffd3\005\uffd3\032\uffd3\033\uffd3\034\uffd3\041\uffd3\001\002" +
    "\000\016\003\052\005\012\032\022\033\010\034\025\041" +
    "\021\001\002\000\024\002\uffd8\003\uffd8\004\uffd8\005\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\001\002\000" +
    "\040\003\202\007\203\012\100\013\074\014\076\015\075" +
    "\016\077\021\106\022\101\023\104\024\103\025\105\026" +
    "\102\027\073\030\107\001\002\000\006\007\201\011\032" +
    "\001\002\000\016\003\uffd6\005\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\041\uffd6\001\002\000\016\003\uffd4\005\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\041\uffd4\001\002\000\016\003\uffd7\005" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\041\uffd7\001\002\000\036" +
    "\007\205\012\100\013\074\014\076\015\075\016\077\021" +
    "\106\022\101\023\104\024\103\025\105\026\102\027\073" +
    "\030\107\001\002\000\016\003\uffd5\005\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\041\uffd5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\003\003\021\004\001\001\000\002\001" +
    "\001\000\024\004\017\005\025\006\005\007\010\011\006" +
    "\012\016\013\014\022\012\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\173\001\001\000\002" +
    "\001\001\000\020\004\156\005\025\006\005\007\010\011" +
    "\006\012\016\013\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\155\006\005\007\010\011\006\012\016" +
    "\013\014\001\001\000\002\001\001\000\004\014\055\001" +
    "\001\000\016\005\052\006\005\007\010\011\006\012\016" +
    "\013\014\001\001\000\006\024\034\025\036\001\001\000" +
    "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\042\001\001\000\002\001\001\000\004\025\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\140\001\001\000\006\007\062\010\136" +
    "\001\001\000\006\007\062\010\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\062" +
    "\010\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\062\010\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\062\010\124\001" +
    "\001\000\006\007\062\010\123\001\001\000\006\007\062" +
    "\010\122\001\001\000\006\007\062\010\121\001\001\000" +
    "\002\001\001\000\006\007\062\010\116\001\001\000\006" +
    "\007\062\010\115\001\001\000\006\007\062\010\114\001" +
    "\001\000\006\007\062\010\113\001\001\000\006\007\062" +
    "\010\112\001\001\000\006\007\062\010\111\001\001\000" +
    "\006\007\062\010\110\001\001\000\006\007\062\010\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\062\010" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\141\006\005\007\010\011\006\012" +
    "\016\013\014\001\001\000\002\001\001\000\004\017\146" +
    "\001\001\000\004\017\144\001\001\000\016\005\145\006" +
    "\005\007\010\011\006\012\016\013\014\001\001\000\002" +
    "\001\001\000\016\005\147\006\005\007\010\011\006\012" +
    "\016\013\014\001\001\000\002\001\001\000\004\007\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\155" +
    "\006\005\007\010\011\006\012\016\013\014\001\001\000" +
    "\016\005\052\006\005\007\010\011\006\012\016\013\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\062\010\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\062\010\203\001\001\000\006" +
    "\007\062\010\176\001\001\000\004\020\174\001\001\000" +
    "\016\005\175\006\005\007\010\011\006\012\016\013\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	varTable = new HashMap<String, Integer>();
	typeTable = new HashMap<String, String>();
    // String buffer used to store output program
    outputBuffer = new StringBuffer();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



	public HashMap<String, Integer>varTable;
	public HashMap<String, String>typeTable;

	public int typeErrors = 0;
	public int typeWarnings = 0;

	public StringBuffer outputBuffer;

    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
		else System.err.print(": ");
	}

    // Represent the number of the first usable label 
    public int label = 0;

    // Generation of the next label number
    public int genLabel(){
        label++;
        return label;
    };

	// Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	private void checkType(String n, Object t) {
		if(n.contains("["))
			n = n.split("\\[")[0];
		if(parser.typeTable.containsKey(n) && parser.typeTable.get(n).equals("INT")
			&& t instanceof Double)
			pSemWarning("Assignment of a double value to an int variable.");
		else if(parser.typeTable.containsKey(n) && parser.typeTable.get(n).equals("DOUBLE")
			&& t instanceof Integer)
			pSemWarning("Assignment of an int value to a double variable.");
	}

	private void checkSameType(Object x, Object y) {
		if((x instanceof Integer && y instanceof Double) || (x instanceof Double && y instanceof Integer)) {
		pSemWarning("Operation between Integer and Double.");
		return;
		}

		String xT = "", yT = "";

		if(x instanceof String) {
			if(((String)x).contains("["))
				x = ((String)x).split("\\[")[0];
			if(parser.typeTable.containsKey(x))
				xT = parser.typeTable.get(x);
		} else {
			if(x instanceof Integer)
				xT = "INT";
			if(x instanceof Double)
				xT = "DOUBLE";
		}

		if(y instanceof String) {
			if(((String)y).contains("["))
				y = ((String)y).split("\\[")[0];
			if(parser.typeTable.containsKey(y))
				yT = parser.typeTable.get(y);
		} else {
			if(y instanceof Integer)
				yT = "INT";
			if(y instanceof Double)
				yT = "DOUBLE";
		}

		if(!xT.equals("") && !yT.equals("") && !xT.equals(yT))
			pSemWarning("Operation between Integer and Double.");
		
	}

	private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
		parser.typeErrors++;
    }
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
		parser.typeWarnings++;
    }

	private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }

	private void dump(String s){
        parser.outputBuffer.append(s+"\n");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // e ::= ROPEN error RCLOSE 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		 pSynWarning("Errorin expression"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // e ::= MINUS DOUBLE 
            { parser.Tree.reduce(2,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=-x; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // e ::= MINUS INT 
            { parser.Tree.reduce(2,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=-x; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // e ::= name 
            { parser.Tree.reduce(1,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=x; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // e ::= DOUBLE 
            { parser.Tree.reduce(1,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=x; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // e ::= INT 
            { parser.Tree.reduce(1,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=x; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // e ::= NOT e 
            { parser.Tree.reduce(2,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" ! "); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // e ::= e OR e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" | "); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // e ::= e AND e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" & "); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // e ::= e LET e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" <= "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // e ::= e GET e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" >= "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // e ::= e ELT e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" <= "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // e ::= e EGT e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" >= "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // e ::= e LT e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" < "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // e ::= e GT e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" > "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // e ::= e EQUAL EQUAL e 
            { parser.Tree.reduce(4,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" == "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // e ::= e SLASH e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" / "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // e ::= e STAR e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" * "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // e ::= e MINUS e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" - "); 
							 checkSameType(x,y);
						
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // e ::= e PLUS e 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new String(x+" "+y+" + ");
							 checkSameType(x,y);
						 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // e ::= ROPEN e RCLOSE 
            { parser.Tree.reduce(3,"e",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=x; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // func ::= PRINT error S 
            { parser.Tree.reduce(3,"func",0);
              Object RESULT = null;
		 pSynWarning("Error in 'print' instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // func ::= PRINT name S 
            { parser.Tree.reduce(3,"func",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 dump("PRINT "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nt0_while ::= 
            { parser.Tree.reduce(0,"nt0_while",0);
              Object RESULT = null;
		
				RESULT=parser.genLabel();
				dump("EVAL "+parser.stack(0)+"\t/* while (line "+parser.getLine()+") */");
				dump("GOTOF L"+ RESULT);
			
              CUP$parser$result = new java_cup.runtime.Symbol(14/*nt0_while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while_cond ::= ROPEN e error 
            { parser.Tree.reduce(3,"while_cond",0);
              Object RESULT = null;
		 pSynWarning("Error in 'while' condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_cond ::= error e RCLOSE 
            { parser.Tree.reduce(3,"while_cond",0);
              Object RESULT = null;
		 pSynWarning("Error in 'while' condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while_cond ::= ROPEN error RCLOSE 
            { parser.Tree.reduce(3,"while_cond",0);
              Object RESULT = null;
		 pSynWarning("Error in 'while' condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while_cond ::= ROPEN e RCLOSE 
            { parser.Tree.reduce(3,"while_cond",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while ::= WHILE while_cond nt0_while body_el 
            { parser.Tree.reduce(4,"while",0);
              Object RESULT = null;
		
				dump("L"+parser.stack(-1)+":");
			
              CUP$parser$result = new java_cup.runtime.Symbol(8/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nt1_if ::= 
            { parser.Tree.reduce(0,"nt1_if",0);
              Object RESULT = null;
		 
                RESULT=parser.genLabel();
                dump("GOTO L"+RESULT);
                dump("L"+parser.stack(-2)+":");
            
              CUP$parser$result = new java_cup.runtime.Symbol(13/*nt1_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nt0_if ::= 
            { parser.Tree.reduce(0,"nt0_if",0);
              Object RESULT = null;
		 RESULT=parser.genLabel();
                dump("EVAL "+parser.stack(0)+"\t/* if (line "+parser.getLine()+") */");
				dump("GOTOF L"+RESULT);
            
              CUP$parser$result = new java_cup.runtime.Symbol(12/*nt0_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_cond ::= ROPEN e error 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;
		 pSynWarning("Error ')' expected in 'if' instruciton"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_cond ::= error e RCLOSE 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;
		 pSynWarning("Error '(' expected in 'if' instruciton"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_cond ::= ROPEN error RCLOSE 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;
		 pSynWarning("Error in 'if' condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_cond ::= ROPEN e RCLOSE 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if ::= IF if_cond nt0_if body_el error nt1_if body_el 
            { parser.Tree.reduce(7,"if",0);
              Object RESULT = null;
		 pSynWarning("Error 'else' expected in 'if' instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if ::= IF if_cond nt0_if body_el 
            { parser.Tree.reduce(4,"if",0);
              Object RESULT = null;
		
					dump("L"+parser.stack(-1)+":");
                
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF if_cond nt0_if body_el ELSE nt1_if body_el 
            { parser.Tree.reduce(7,"if",0);
              Object RESULT = null;
		
					dump("L"+parser.stack(-1)+":");
                
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // name ::= error SCLOSE 
            { parser.Tree.reduce(2,"name",0);
              Object RESULT = null;
		 pSynWarning("Error in vector"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // name ::= VAR SOPEN name SCLOSE 
            { parser.Tree.reduce(4,"name",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new String(x+"["+v+"]");
					if(!parser.varTable.containsKey(x))
						pSemError("Var "+x+" not defined");
				 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // name ::= VAR SOPEN INT SCLOSE 
            { parser.Tree.reduce(4,"name",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=new String(x+"["+v+"]");					
					if(!parser.varTable.containsKey(x))
						pSemError("Var "+x+" not defined");
					else if(v >= parser.varTable.get(x))
						pSemError("Var "+x+" exeeds array index");
				 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // name ::= VAR 
            { parser.Tree.reduce(1,"name",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=x;
					if(!parser.varTable.containsKey(x))
						pSemError("Var "+x+" not defined");
			 	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // init_el ::= error EQUAL error S 
            { parser.Tree.reduce(4,"init_el",0);
              Object RESULT = null;
		 pSynWarning("Error in assigment"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*init_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // init_el ::= name EQUAL error S 
            { parser.Tree.reduce(4,"init_el",0);
              Object RESULT = null;
		 pSynWarning("Error in expression"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*init_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_el ::= name EQUAL e S 
            { parser.Tree.reduce(4,"init_el",0);
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 dump("EVAL "+v.toString());
			   checkType((String)n, v);
			   dump("ASS "+n); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*init_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body_el ::= error S 
            { parser.Tree.reduce(2,"body_el",0);
              Object RESULT = null;
		 pSynWarning("Error in statement"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body_el ::= GOPEN error GCLOSE 
            { parser.Tree.reduce(3,"body_el",0);
              Object RESULT = null;
		 pSynWarning("Missing ; before }"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body_el ::= GOPEN body error GCLOSE 
            { parser.Tree.reduce(4,"body_el",0);
              Object RESULT = null;
		 pSynWarning("Missing ; before }"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body_el ::= GOPEN body GCLOSE 
            { parser.Tree.reduce(3,"body_el",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_el ::= func 
            { parser.Tree.reduce(1,"body_el",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_el ::= if 
            { parser.Tree.reduce(1,"body_el",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_el ::= while 
            { parser.Tree.reduce(1,"body_el",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_el ::= init_el 
            { parser.Tree.reduce(1,"body_el",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*body_el*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= error body_el 
            { parser.Tree.reduce(2,"body",0);
              Object RESULT = null;
		 pSynWarning("Error in statement"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= body_el 
            { parser.Tree.reduce(1,"body",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= body body_el 
            { parser.Tree.reduce(2,"body",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"type",0);
              String RESULT = null;
		 RESULT = new String("DOUBLE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT_TYPE 
            { parser.Tree.reduce(1,"type",0);
              String RESULT = null;
		 RESULT = new String("INT"); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= VAR SOPEN INT SCLOSE 
            { parser.Tree.reduce(4,"variable",0);
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = (String) parser.stack(-4);
					parser.varTable.put(name, val);
					parser.typeTable.put(name, RESULT);
					dump(RESULT + " " + name + "[" + val + "]");
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= VAR 
            { parser.Tree.reduce(1,"variable",0);
              String RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = (String) parser.stack(-1);
					parser.varTable.put(name, 1);
					parser.typeTable.put(name, RESULT);
					dump(RESULT + " " + name);
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_list ::= variable 
            { parser.Tree.reduce(1,"var_list",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_list ::= var_list COMMA NT$0 variable 
            { parser.Tree.reduce(4,"var_list",0);
              String RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT = null;
 RESULT = (String) parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= type error S 
            { parser.Tree.reduce(3,"declaration",0);
              String RESULT = null;
		 pSynWarning("Error in declaration"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= type var_list S 
            { parser.Tree.reduce(3,"declaration",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= 
            { parser.Tree.reduce(0,"declaration_list",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration_list declaration 
            { parser.Tree.reduce(2,"declaration_list",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declaration_list body 
            { parser.Tree.reduce(2,"program",1);
              Object RESULT = null;
		 if(parser.typeErrors > 0 || parser.typeWarnings > 0)
					System.out.println("Program contains "+parser.typeErrors+" type errors and "+ parser.typeWarnings + " type warnings.");
				else {
					System.out.println("Program correctly recognised");
					System.out.println(parser.outputBuffer);
				} 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            { parser.Tree.reduce(1,"program",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

